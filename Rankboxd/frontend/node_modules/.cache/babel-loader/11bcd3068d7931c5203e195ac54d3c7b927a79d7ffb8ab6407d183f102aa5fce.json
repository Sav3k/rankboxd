{"ast":null,"code":"var _jsxFileName = \"/Users/kilianreichl/RBDev/rankboxd/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport InputForm from './components/InputForm';\nimport RankingProcess from './components/RankingProcess';\nimport MovieResults from './components/Results';\nimport ProgressBar from './components/ProgressBar';\nimport ModeSelection from './components/ModeSelection';\nimport StatusBar from './components/StatusBar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONFIDENCE_SCALING = {\n  BASE_THRESHOLD: 0.7,\n  MIN_DATASET: 10,\n  MAX_DATASET: 500,\n  EARLY_STAGE_MULTIPLIER: 0.8,\n  LATE_STAGE_MULTIPLIER: 1.2,\n  MIN_ALLOWED_THRESHOLD: 0.5,\n  MAX_ALLOWED_THRESHOLD: 0.9\n};\nconst CONFIDENCE_CONSTANTS = {\n  MIN_COMPARISONS: 3,\n  OPTIMAL_COMPARISONS: 5,\n  LOCAL_RANGE: 3,\n  RECENT_WEIGHT: 0.6,\n  HISTORICAL_WEIGHT: 0.4,\n  POSITION_WEIGHTS: {\n    TOP: 0.8,\n    // Expect more consistent wins\n    MIDDLE: 0.5,\n    // Mixed results are okay\n    BOTTOM: 0.8 // Expect more consistent losses\n  },\n  TRANSITIVITY_WEIGHT: 0.3,\n  COMPARISON_QUALITY_WEIGHT: 0.2\n};\nconst calculateAdaptiveThresholds = (movieCount, progress) => {\n  // Calculate base scaling factor based on dataset size\n  const sizeFactor = Math.min(Math.max((movieCount - CONFIDENCE_SCALING.MIN_DATASET) / (CONFIDENCE_SCALING.MAX_DATASET - CONFIDENCE_SCALING.MIN_DATASET), 0), 1);\n\n  // Adjust base threshold based on dataset size\n  // Smaller datasets need higher confidence thresholds\n  const baseThreshold = CONFIDENCE_SCALING.BASE_THRESHOLD * (1 - sizeFactor * 0.3);\n\n  // Calculate progress-based thresholds\n  const progressMultiplier = progress < 0.3 ? CONFIDENCE_SCALING.EARLY_STAGE_MULTIPLIER : progress > 0.7 ? CONFIDENCE_SCALING.LATE_STAGE_MULTIPLIER : 1;\n\n  // Calculate final threshold with bounds\n  const adaptiveThreshold = Math.min(Math.max(baseThreshold * progressMultiplier, CONFIDENCE_SCALING.MIN_ALLOWED_THRESHOLD), CONFIDENCE_SCALING.MAX_ALLOWED_THRESHOLD);\n  return {\n    confidence: adaptiveThreshold,\n    stability: adaptiveThreshold * 0.8,\n    transitivity: adaptiveThreshold * 0.9,\n    rankChange: Math.max(0.02, 0.05 * (1 - sizeFactor))\n  };\n};\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [rankings, setRankings] = useState({});\n  const [step, setStep] = useState('input');\n  const [comparisons, setComparisons] = useState(0);\n  const [maxComparisons, setMaxComparisons] = useState(0);\n  const [pendingUpdates, setPendingUpdates] = useState([]);\n  const [recentChanges, setRecentChanges] = useState([]);\n  const [comparisonHistory, setComparisonHistory] = useState([]);\n  const [movieMomentum, setMovieMomentum] = useState({});\n  const CONVERGENCE_CHECK_WINDOW = 10;\n  const BASE_LEARNING_RATE = 0.1;\n  const VOLATILITY_WINDOW = 20; // How many recent changes to consider\n  const VOLATILITY_THRESHOLD_HIGH = 0.05; // High volatility threshold\n  const VOLATILITY_THRESHOLD_LOW = 0.01; // Low volatility threshold\n\n  const MOMENTUM_FACTOR = 0.9;\n  const MIN_LEARNING_RATE = 0.01;\n  const MAX_LEARNING_RATE = 0.2;\n  const EARLY_TERMINATION = {\n    MIN_PROGRESS: 0.4,\n    // Don't terminate before 40% completion\n    MIN_COMPARISONS_PER_MOVIE: 5,\n    MIN_CONFIDENCE_THRESHOLD: 0.7,\n    STABILITY_WINDOW: 15,\n    STABILITY_THRESHOLD: 0.03,\n    MIN_TRANSITIVITY_SCORE: 0.85,\n    RELATIVE_RANK_STABILITY: 0.9\n  };\n  const calculateBatchParameters = useCallback(movieCount => {\n    const scalingFactor = Math.log2(movieCount) / Math.log2(100);\n\n    // Calculate base sizes\n    const baseSizes = {\n      EARLY_STAGE_SIZE: Math.min(8, Math.max(2, Math.floor(movieCount * 0.03 * scalingFactor))),\n      MID_STAGE_SIZE: Math.min(12, Math.max(3, Math.floor(movieCount * 0.06 * scalingFactor))),\n      LATE_STAGE_SIZE: Math.min(20, Math.max(4, Math.floor(movieCount * 0.1 * scalingFactor))),\n      EARLY_STAGE_THRESHOLD: 0.15 + 0.05 * (1 - scalingFactor),\n      LATE_STAGE_THRESHOLD: 0.65 + 0.1 * scalingFactor,\n      MIN_CONFIDENCE_THRESHOLD: 0.35 + 0.1 * scalingFactor\n    };\n\n    // Calculate volatility factor based on recent rating changes\n    const calculateVolatility = () => {\n      if (recentChanges.length < VOLATILITY_WINDOW) {\n        return 1; // Default to normal batch size if not enough data\n      }\n\n      // Calculate average magnitude of recent rating changes\n      const recentVolatility = recentChanges.slice(-VOLATILITY_WINDOW).reduce((sum, change) => sum + Math.abs(change), 0) / VOLATILITY_WINDOW;\n\n      // Convert volatility to a scaling factor between 0.5 and 1.5\n      if (recentVolatility > VOLATILITY_THRESHOLD_HIGH) {\n        return 0.5; // High volatility = smaller batches\n      } else if (recentVolatility < VOLATILITY_THRESHOLD_LOW) {\n        return 1.5; // Low volatility = larger batches\n      } else {\n        // Linear interpolation between thresholds\n        return 1 + (VOLATILITY_THRESHOLD_HIGH - recentVolatility) / (VOLATILITY_THRESHOLD_HIGH - VOLATILITY_THRESHOLD_LOW);\n      }\n    };\n    const volatilityFactor = calculateVolatility();\n\n    // Apply volatility factor to batch sizes\n    return {\n      ...baseSizes,\n      EARLY_STAGE_SIZE: Math.max(2, Math.round(baseSizes.EARLY_STAGE_SIZE * volatilityFactor)),\n      MID_STAGE_SIZE: Math.max(3, Math.round(baseSizes.MID_STAGE_SIZE * volatilityFactor)),\n      LATE_STAGE_SIZE: Math.max(4, Math.round(baseSizes.LATE_STAGE_SIZE * volatilityFactor))\n    };\n  }, [recentChanges]);\n  const startRanking = useCallback(movieList => {\n    console.log(`Starting ranking process with ${movieList.length} movies`);\n    const initialRankings = movieList.reduce((acc, movie) => {\n      acc[movie.identifier] = {\n        rating: 0,\n        movie: movie,\n        wins: 0,\n        losses: 0,\n        comparisons: 0,\n        recentResults: [],\n        // Track last N results\n        confidenceScore: 0,\n        uncertainty: 0\n      };\n      return acc;\n    }, {});\n    setMovies(movieList);\n    setRankings(initialRankings);\n    setStep('mode-selection');\n  }, []);\n  const selectMode = (mode, comparisonsCount) => {\n    setMaxComparisons(comparisonsCount);\n    setStep('ranking');\n  };\n  const finishRanking = useCallback(() => {\n    console.log(\"Finishing ranking process\");\n    setTimeout(() => {\n      setStep('results');\n    }, 0);\n  }, []);\n  const handleUndo = useCallback(() => {\n    if (comparisonHistory.length > 0) {\n      const newHistory = [...comparisonHistory];\n      const lastComparison = newHistory.pop();\n      setComparisonHistory(newHistory);\n      setComparisons(prev => Math.max(0, prev - 1));\n\n      // Clear any pending updates\n      setPendingUpdates([]);\n\n      // Reset the rankings to the previous state and provide the previous pair\n      if (lastComparison) {\n        setRankings(lastComparison.rankings);\n        // Reset recent changes since we're going back\n        setRecentChanges([]);\n        return lastComparison.pair; // Return the previous pair\n      }\n    }\n    return null;\n  }, [comparisonHistory]);\n  const calculateEnhancedConfidence = (movieId, rankings, allMovies) => {\n    const record = rankings[movieId];\n    if (!record || record.comparisons < CONFIDENCE_CONSTANTS.MIN_COMPARISONS) {\n      return 0.2; // Minimum baseline confidence of 20%\n    }\n\n    // 1. Base Comparison Confidence (0-1)\n    const comparisonScore = Math.min(record.comparisons / CONFIDENCE_CONSTANTS.OPTIMAL_COMPARISONS, 1) * 0.8 + 0.2; // Minimum 20% if at least MIN_COMPARISONS\n\n    // 2. Position-Aware Consistency (0-1)\n    const sortedMovies = Object.values(rankings).sort((a, b) => b.rating - a.rating);\n    const position = sortedMovies.findIndex(r => r.movie.identifier === movieId);\n    const relativePosition = position / sortedMovies.length;\n    let expectedWinRate;\n    if (relativePosition <= 0.25) {\n      expectedWinRate = 0.75; // Top 25% should win most\n      positionWeight = CONFIDENCE_CONSTANTS.POSITION_WEIGHTS.TOP;\n    } else if (relativePosition >= 0.75) {\n      expectedWinRate = 0.25; // Bottom 25% should lose most\n      positionWeight = CONFIDENCE_CONSTANTS.POSITION_WEIGHTS.BOTTOM;\n    } else {\n      expectedWinRate = 0.5; // Middle 50% can be mixed\n      positionWeight = CONFIDENCE_CONSTANTS.POSITION_WEIGHTS.MIDDLE;\n    }\n    const actualWinRate = record.wins / record.comparisons;\n    const consistencyScore = 1 - Math.abs(actualWinRate - expectedWinRate);\n\n    // 3. Local Performance (0-1)\n    const neighbors = sortedMovies.slice(Math.max(0, position - CONFIDENCE_CONSTANTS.LOCAL_RANGE), Math.min(sortedMovies.length, position + CONFIDENCE_CONSTANTS.LOCAL_RANGE + 1)).map(r => r.movie.identifier).filter(id => id !== movieId);\n    const localComparisons = record.recentResults.filter(r => neighbors.includes(r.opponent));\n    const localConsistencyScore = localComparisons.length > 0 ? localComparisons.reduce((sum, r) => sum + (r.result === (r.opponent.rating < record.rating ? 1 : 0)), 0) / localComparisons.length : 0.5;\n\n    // 4. Temporal Confidence (0-1)\n    const recentResults = record.recentResults.slice(-5);\n    const historicalResults = record.recentResults.slice(0, -5);\n    const calculateResultsConsistency = results => {\n      if (results.length < 2) return 0.5;\n      let flips = 0;\n      for (let i = 1; i < results.length; i++) {\n        if (results[i].result !== results[i - 1].result) flips++;\n      }\n      return 1 - flips / (results.length - 1);\n    };\n    const recentConsistency = calculateResultsConsistency(recentResults);\n    const historicalConsistency = calculateResultsConsistency(historicalResults);\n    const temporalConsistency = recentConsistency * CONFIDENCE_CONSTANTS.RECENT_WEIGHT + historicalConsistency * CONFIDENCE_CONSTANTS.HISTORICAL_WEIGHT;\n\n    // 5. Transitivity Score (0-1)\n    const transitivityScore = calculateLocalTransitivity(movieId, rankings, sortedMovies, position);\n\n    // Combine all factors with weights\n    const finalConfidence = comparisonScore * 0.25 + consistencyScore * 0.20 + localConsistencyScore * 0.25 + temporalConsistency * 0.15 + transitivityScore * CONFIDENCE_CONSTANTS.TRANSITIVITY_WEIGHT;\n\n    // Ensure minimum confidence of 20% and maximum of 100%\n    return Math.min(Math.max(finalConfidence, 0.2), 1);\n  };\n  const calculateLocalTransitivity = (movieId, rankings, sortedMovies, position) => {\n    const localRange = CONFIDENCE_CONSTANTS.LOCAL_RANGE;\n    const start = Math.max(0, position - localRange);\n    const end = Math.min(sortedMovies.length, position + localRange + 1);\n    const localMovies = sortedMovies.slice(start, end);\n    let transitiveTriads = 0;\n    let totalTriads = 0;\n    for (let i = 0; i < localMovies.length - 2; i++) {\n      for (let j = i + 1; j < localMovies.length - 1; j++) {\n        for (let k = j + 1; k < localMovies.length; k++) {\n          const [a, b, c] = [localMovies[i], localMovies[j], localMovies[k]].map(m => m.movie.identifier);\n\n          // Only count triads where we have comparisons between all pairs\n          const hasAllComparisons = rankings[a].recentResults.some(r => r.opponent === b || r.opponent === c) && rankings[b].recentResults.some(r => r.opponent === c);\n          if (hasAllComparisons) {\n            totalTriads++;\n            const isTransitive = rankings[a].rating > rankings[b].rating && rankings[b].rating > rankings[c].rating && rankings[a].rating > rankings[c].rating || rankings[c].rating > rankings[b].rating && rankings[b].rating > rankings[a].rating && rankings[c].rating > rankings[a].rating;\n            if (isTransitive) transitiveTriads++;\n          }\n        }\n      }\n    }\n    return totalTriads > 0 ? transitiveTriads / totalTriads : 0.5;\n  };\n  const checkTransitivityViolation = useCallback((winner, loser) => {\n    const winnerRating = rankings[winner].rating;\n    const loserRating = rankings[loser].rating;\n\n    // If the winner's current rating is lower, this is a transitivity violation\n    if (winnerRating < loserRating) {\n      console.log(`Transitivity violation detected: ${winner} (${winnerRating}) beat ${loser} (${loserRating})`);\n      return true;\n    }\n    return false;\n  }, [rankings]);\n  const getDynamicLearningRate = useCallback((winner, loser) => {\n    const progress = comparisons / maxComparisons;\n    const ratingDiff = Math.abs(rankings[winner].rating - rankings[loser].rating);\n    const winnerConfidence = calculateConfidence(winner);\n    const loserConfidence = calculateConfidence(loser);\n\n    // Start with base learning rate\n    let learningRate = BASE_LEARNING_RATE;\n\n    // Adjust based on progress\n    learningRate *= 1 - progress * 0.5;\n\n    // Adjust for rating difference\n    const surpriseFactor = 1 / (1 + Math.exp(-5 * (1 - ratingDiff)));\n    learningRate *= 1 + surpriseFactor;\n\n    // Confidence adjustment\n    const confidenceFactor = 1 - (winnerConfidence + loserConfidence) / 4;\n    learningRate *= confidenceFactor;\n\n    // Transitivity violation adjustment\n    if (checkTransitivityViolation(winner, loser)) {\n      learningRate *= 1.5;\n    }\n\n    // Apply momentum if available\n    const winnerMomentum = movieMomentum[winner] || 0;\n    const loserMomentum = movieMomentum[loser] || 0;\n    const avgMomentum = (Math.abs(winnerMomentum) + Math.abs(loserMomentum)) / 2;\n    learningRate *= 1 + avgMomentum * MOMENTUM_FACTOR;\n\n    // Clamp learning rate\n    return Math.max(MIN_LEARNING_RATE, Math.min(MAX_LEARNING_RATE, learningRate));\n  }, [comparisons, maxComparisons, rankings, checkTransitivityViolation, calculateConfidence, movieMomentum]);\n  const calculateOptimalBatchSize = useCallback(() => {\n    const movieCount = movies.length;\n    const batchParams = calculateBatchParameters(movieCount);\n    const progress = comparisons / maxComparisons;\n\n    // Calculate average confidence across all movies\n    const avgConfidence = Object.values(rankings).reduce((sum, record) => {\n      return sum + (record && record.movie ? calculateConfidence(record.movie.identifier) : 0);\n    }, 0) / movieCount;\n    console.log(`Current batch parameters for ${movieCount} movies:`, {\n      early: batchParams.EARLY_STAGE_SIZE,\n      mid: batchParams.MID_STAGE_SIZE,\n      late: batchParams.LATE_STAGE_SIZE,\n      progress: progress.toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2)\n    });\n\n    // Determine stage based on progress\n    if (progress < batchParams.EARLY_STAGE_THRESHOLD) {\n      return batchParams.EARLY_STAGE_SIZE;\n    } else if (progress > batchParams.LATE_STAGE_THRESHOLD) {\n      return batchParams.LATE_STAGE_SIZE;\n    } else {\n      return avgConfidence < batchParams.MIN_CONFIDENCE_THRESHOLD ? batchParams.EARLY_STAGE_SIZE : batchParams.MID_STAGE_SIZE;\n    }\n  }, [movies.length, comparisons, maxComparisons, rankings, calculateConfidence, calculateBatchParameters]);\n  const calculateTransitivityScore = useCallback(() => {\n    let transitiveTriads = 0;\n    let totalTriads = 0;\n\n    // Get sorted movies by rating\n    const sortedMovies = Object.values(rankings).sort((a, b) => b.rating - a.rating).map(r => r.movie.identifier);\n\n    // Check random sample of triads for transitivity\n    const sampleSize = Math.min(1000, Math.floor(sortedMovies.length * (sortedMovies.length - 1) * (sortedMovies.length - 2) / 6));\n    for (let i = 0; i < sampleSize; i++) {\n      const idx1 = Math.floor(Math.random() * sortedMovies.length);\n      const idx2 = Math.floor(Math.random() * sortedMovies.length);\n      const idx3 = Math.floor(Math.random() * sortedMovies.length);\n      if (idx1 !== idx2 && idx2 !== idx3 && idx1 !== idx3) {\n        totalTriads++;\n        const [a, b, c] = [sortedMovies[idx1], sortedMovies[idx2], sortedMovies[idx3]].sort((x, y) => rankings[y].rating - rankings[x].rating);\n        if (rankings[a].rating > rankings[b].rating && rankings[b].rating > rankings[c].rating && rankings[a].rating > rankings[c].rating) {\n          transitiveTriads++;\n        }\n      }\n    }\n    return totalTriads > 0 ? transitiveTriads / totalTriads : 0;\n  }, [rankings]);\n  const calculateRankStability = useCallback(() => {\n    if (comparisonHistory.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return 0;\n    }\n    const currentRanking = Object.values(rankings).sort((a, b) => b.rating - a.rating).map(r => r.movie.identifier);\n    const previousRanking = Object.values(comparisonHistory[comparisonHistory.length - EARLY_TERMINATION.STABILITY_WINDOW].rankings).sort((a, b) => b.rating - a.rating).map(r => r.movie.identifier);\n    let stabilityScore = 0;\n    for (let i = 0; i < currentRanking.length; i++) {\n      const previousIndex = previousRanking.indexOf(currentRanking[i]);\n      const maxPossibleDiff = currentRanking.length - 1;\n      const actualDiff = Math.abs(i - previousIndex);\n      stabilityScore += 1 - actualDiff / maxPossibleDiff;\n    }\n    return stabilityScore / currentRanking.length;\n  }, [rankings, comparisonHistory, EARLY_TERMINATION.STABILITY_WINDOW]);\n  const checkRankingStability = useCallback(() => {\n    const progress = comparisons / maxComparisons;\n    const adaptiveThresholds = calculateAdaptiveThresholds(movies.length, progress);\n\n    // Don't check before minimum progress\n    if (comparisons / maxComparisons < EARLY_TERMINATION.MIN_PROGRESS) {\n      return false;\n    }\n\n    // Check minimum comparisons per movie\n    const insufficientComparisons = Object.values(rankings).some(record => record.comparisons < EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE);\n    if (insufficientComparisons) {\n      return false;\n    }\n\n    // Calculate average confidence with adaptive threshold\n    const avgConfidence = Object.values(rankings).reduce((sum, record) => sum + calculateConfidence(record.movie.identifier), 0) / movies.length;\n    if (avgConfidence < Math.max(adaptiveThresholds.confidence, EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD)) {\n      return false;\n    }\n\n    // Check recent stability with adaptive threshold\n    if (recentChanges.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return false;\n    }\n    const recentInstability = recentChanges.slice(-EARLY_TERMINATION.STABILITY_WINDOW).some(change => Math.abs(change) > Math.min(adaptiveThresholds.rankChange, EARLY_TERMINATION.STABILITY_THRESHOLD));\n    if (recentInstability) {\n      return false;\n    }\n\n    // Check transitivity with adaptive threshold\n    const transitivityScore = calculateTransitivityScore();\n    if (transitivityScore < Math.max(adaptiveThresholds.transitivity, EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE)) {\n      return false;\n    }\n\n    // Check relative rank stability with adaptive threshold\n    const rankStability = calculateRankStability();\n    if (rankStability < Math.max(adaptiveThresholds.stability, EARLY_TERMINATION.RELATIVE_RANK_STABILITY)) {\n      return false;\n    }\n    console.log('Early termination conditions met:', {\n      progress: (comparisons / maxComparisons).toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2),\n      transitivityScore: transitivityScore.toFixed(2),\n      rankStability: rankStability.toFixed(2),\n      adaptiveThresholds: {\n        confidence: adaptiveThresholds.confidence.toFixed(2),\n        stability: adaptiveThresholds.stability.toFixed(2),\n        transitivity: adaptiveThresholds.transitivity.toFixed(2),\n        rankChange: adaptiveThresholds.rankChange.toFixed(3)\n      }\n    });\n    return true;\n  }, [movies.length, comparisons, maxComparisons, rankings, recentChanges, calculateConfidence, calculateTransitivityScore, calculateRankStability, EARLY_TERMINATION.MIN_PROGRESS, EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE, EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD, EARLY_TERMINATION.STABILITY_WINDOW, EARLY_TERMINATION.STABILITY_THRESHOLD, EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE, EARLY_TERMINATION.RELATIVE_RANK_STABILITY]);\n  const checkConvergence = useCallback(() => {\n    if (checkRankingStability()) {\n      console.log(\"Rankings have converged with high confidence - finishing early\");\n      finishRanking();\n    }\n  }, [checkRankingStability, finishRanking]);\n  const processBatchUpdate = useCallback(updates => {\n    setRankings(prevRankings => {\n      const newRankings = {\n        ...prevRankings\n      };\n      const newMomentum = {\n        ...movieMomentum\n      };\n      updates.forEach(({\n        winner,\n        loser\n      }) => {\n        const learningRate = getDynamicLearningRate(winner, loser);\n        const winnerStrength = Math.exp(prevRankings[winner].rating);\n        const loserStrength = Math.exp(prevRankings[loser].rating);\n        const expectedProbWinner = winnerStrength / (winnerStrength + loserStrength);\n        const ratingChange = learningRate * (1 - expectedProbWinner);\n\n        // Update momentum\n        newMomentum[winner] = (newMomentum[winner] || 0) * MOMENTUM_FACTOR + ratingChange;\n        newMomentum[loser] = (newMomentum[loser] || 0) * MOMENTUM_FACTOR - ratingChange;\n\n        // Update ratings with momentum influence\n        newRankings[winner] = {\n          ...newRankings[winner],\n          rating: prevRankings[winner].rating + ratingChange + newMomentum[winner] * MOMENTUM_FACTOR,\n          wins: prevRankings[winner].wins + 1,\n          comparisons: prevRankings[winner].comparisons + 1,\n          recentResults: [...prevRankings[winner].recentResults.slice(-9), 1]\n        };\n        newRankings[loser] = {\n          ...newRankings[loser],\n          rating: prevRankings[loser].rating - ratingChange + newMomentum[loser] * MOMENTUM_FACTOR,\n          losses: prevRankings[loser].losses + 1,\n          comparisons: prevRankings[loser].comparisons + 1,\n          recentResults: [...prevRankings[loser].recentResults.slice(-9), 0]\n        };\n        setRecentChanges(prev => [...prev.slice(-CONVERGENCE_CHECK_WINDOW + 1), ratingChange]);\n      });\n      setMovieMomentum(newMomentum);\n      return newRankings;\n    });\n    checkConvergence();\n  }, [getDynamicLearningRate, checkConvergence, movieMomentum]);\n  const updateRankings = useCallback((winnerIdentifier, loserIdentifier, currentPair) => {\n    // Save current state to history\n    setComparisonHistory(prev => [...prev, {\n      winner: winnerIdentifier,\n      loser: loserIdentifier,\n      rankings: {\n        ...rankings\n      },\n      pair: currentPair // Use currentPair instead of pair\n    }]);\n\n    // Add to pending updates and process if optimal batch size reached\n    setPendingUpdates(prev => {\n      const newPending = [...prev, {\n        winner: winnerIdentifier,\n        loser: loserIdentifier\n      }];\n      const optimalBatchSize = calculateOptimalBatchSize();\n      if (newPending.length >= optimalBatchSize) {\n        console.log(`Processing batch of size ${optimalBatchSize}`);\n        processBatchUpdate(newPending);\n        return [];\n      }\n      return newPending;\n    });\n    setComparisons(prev => prev + 1);\n  }, [rankings, processBatchUpdate, calculateOptimalBatchSize]);\n  useEffect(() => {\n    if (step === 'results' && pendingUpdates.length > 0) {\n      processBatchUpdate(pendingUpdates);\n      setPendingUpdates([]);\n    }\n  }, [step, pendingUpdates, processBatchUpdate]);\n  const memoizedRankingProcess = useMemo(() => /*#__PURE__*/_jsxDEV(RankingProcess, {\n    movies: movies,\n    rankings: rankings,\n    comparisons: comparisons,\n    maxComparisons: maxComparisons,\n    calculateConfidence: calculateConfidence,\n    onChoose: updateRankings,\n    onFinish: finishRanking,\n    onUndo: handleUndo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 639,\n    columnNumber: 5\n  }, this), [movies, rankings, comparisons, maxComparisons, calculateConfidence, updateRankings, finishRanking, handleUndo]);\n\n  // Around line 563, update the return statement:\n  // Around line 563, update the return statement to make backgrounds consistent\n  // Around line 563, update the return statement with solid background and texture\n  // Around line 563, clean return statement with solid background\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-base-100 text-base-content font-sans\",\n    children: step === 'input' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-6xl font-crimson font-bold mt-12 mb-16 animate-fade-in\",\n        children: \"RankBoxd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n        onSubmit: startRanking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col min-h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        currentStep: step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"flex-grow\",\n        children: [step === 'mode-selection' && /*#__PURE__*/_jsxDEV(ModeSelection, {\n          movies: movies,\n          onModeSelect: selectMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 669,\n          columnNumber: 13\n        }, this), step === 'ranking' && memoizedRankingProcess, step === 'results' && /*#__PURE__*/_jsxDEV(MovieResults, {\n          rankings: Object.values(rankings),\n          calculateConfidence: calculateConfidence\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 9\n      }, this), (step === 'ranking' || step === 'results') && /*#__PURE__*/_jsxDEV(StatusBar, {\n        comparisons: comparisons,\n        maxComparisons: maxComparisons,\n        avgConfidence: Object.values(rankings).reduce((sum, r) => sum + calculateConfidence(r.movie.identifier), 0) / movies.length,\n        stabilityScore: calculateRankStability(),\n        estimatedMinutesLeft: Math.ceil((maxComparisons - comparisons) * 0.1)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 684,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 665,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 656,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"1sI7F8MjVRba27dDb1OLvtKrgoo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","InputForm","RankingProcess","MovieResults","ProgressBar","ModeSelection","StatusBar","jsxDEV","_jsxDEV","CONFIDENCE_SCALING","BASE_THRESHOLD","MIN_DATASET","MAX_DATASET","EARLY_STAGE_MULTIPLIER","LATE_STAGE_MULTIPLIER","MIN_ALLOWED_THRESHOLD","MAX_ALLOWED_THRESHOLD","CONFIDENCE_CONSTANTS","MIN_COMPARISONS","OPTIMAL_COMPARISONS","LOCAL_RANGE","RECENT_WEIGHT","HISTORICAL_WEIGHT","POSITION_WEIGHTS","TOP","MIDDLE","BOTTOM","TRANSITIVITY_WEIGHT","COMPARISON_QUALITY_WEIGHT","calculateAdaptiveThresholds","movieCount","progress","sizeFactor","Math","min","max","baseThreshold","progressMultiplier","adaptiveThreshold","confidence","stability","transitivity","rankChange","App","_s","movies","setMovies","rankings","setRankings","step","setStep","comparisons","setComparisons","maxComparisons","setMaxComparisons","pendingUpdates","setPendingUpdates","recentChanges","setRecentChanges","comparisonHistory","setComparisonHistory","movieMomentum","setMovieMomentum","CONVERGENCE_CHECK_WINDOW","BASE_LEARNING_RATE","VOLATILITY_WINDOW","VOLATILITY_THRESHOLD_HIGH","VOLATILITY_THRESHOLD_LOW","MOMENTUM_FACTOR","MIN_LEARNING_RATE","MAX_LEARNING_RATE","EARLY_TERMINATION","MIN_PROGRESS","MIN_COMPARISONS_PER_MOVIE","MIN_CONFIDENCE_THRESHOLD","STABILITY_WINDOW","STABILITY_THRESHOLD","MIN_TRANSITIVITY_SCORE","RELATIVE_RANK_STABILITY","calculateBatchParameters","scalingFactor","log2","baseSizes","EARLY_STAGE_SIZE","floor","MID_STAGE_SIZE","LATE_STAGE_SIZE","EARLY_STAGE_THRESHOLD","LATE_STAGE_THRESHOLD","calculateVolatility","length","recentVolatility","slice","reduce","sum","change","abs","volatilityFactor","round","startRanking","movieList","console","log","initialRankings","acc","movie","identifier","rating","wins","losses","recentResults","confidenceScore","uncertainty","selectMode","mode","comparisonsCount","finishRanking","setTimeout","handleUndo","newHistory","lastComparison","pop","prev","pair","calculateEnhancedConfidence","movieId","allMovies","record","comparisonScore","sortedMovies","Object","values","sort","a","b","position","findIndex","r","relativePosition","expectedWinRate","positionWeight","actualWinRate","consistencyScore","neighbors","map","filter","id","localComparisons","includes","opponent","localConsistencyScore","result","historicalResults","calculateResultsConsistency","results","flips","i","recentConsistency","historicalConsistency","temporalConsistency","transitivityScore","calculateLocalTransitivity","finalConfidence","localRange","start","end","localMovies","transitiveTriads","totalTriads","j","k","c","m","hasAllComparisons","some","isTransitive","checkTransitivityViolation","winner","loser","winnerRating","loserRating","getDynamicLearningRate","ratingDiff","winnerConfidence","calculateConfidence","loserConfidence","learningRate","surpriseFactor","exp","confidenceFactor","winnerMomentum","loserMomentum","avgMomentum","calculateOptimalBatchSize","batchParams","avgConfidence","early","mid","late","toFixed","calculateTransitivityScore","sampleSize","idx1","random","idx2","idx3","x","y","calculateRankStability","currentRanking","previousRanking","stabilityScore","previousIndex","indexOf","maxPossibleDiff","actualDiff","checkRankingStability","adaptiveThresholds","insufficientComparisons","recentInstability","rankStability","checkConvergence","processBatchUpdate","updates","prevRankings","newRankings","newMomentum","forEach","winnerStrength","loserStrength","expectedProbWinner","ratingChange","updateRankings","winnerIdentifier","loserIdentifier","currentPair","newPending","optimalBatchSize","memoizedRankingProcess","onChoose","onFinish","onUndo","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onSubmit","currentStep","onModeSelect","estimatedMinutesLeft","ceil","_c","$RefreshReg$"],"sources":["/Users/kilianreichl/RBDev/rankboxd/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport InputForm from './components/InputForm';\nimport RankingProcess from './components/RankingProcess';\nimport MovieResults from './components/Results';\nimport ProgressBar from './components/ProgressBar';\nimport ModeSelection from './components/ModeSelection';\nimport StatusBar from './components/StatusBar';\n\nconst CONFIDENCE_SCALING = {\n  BASE_THRESHOLD: 0.7,\n  MIN_DATASET: 10,\n  MAX_DATASET: 500,\n  EARLY_STAGE_MULTIPLIER: 0.8,\n  LATE_STAGE_MULTIPLIER: 1.2,\n  MIN_ALLOWED_THRESHOLD: 0.5,\n  MAX_ALLOWED_THRESHOLD: 0.9\n};\n\nconst CONFIDENCE_CONSTANTS = {\n  MIN_COMPARISONS: 3,\n  OPTIMAL_COMPARISONS: 5,\n  LOCAL_RANGE: 3,\n  RECENT_WEIGHT: 0.6,\n  HISTORICAL_WEIGHT: 0.4,\n  POSITION_WEIGHTS: {\n    TOP: 0.8,    // Expect more consistent wins\n    MIDDLE: 0.5, // Mixed results are okay\n    BOTTOM: 0.8  // Expect more consistent losses\n  },\n  TRANSITIVITY_WEIGHT: 0.3,\n  COMPARISON_QUALITY_WEIGHT: 0.2\n};\n\n\nconst calculateAdaptiveThresholds = (movieCount, progress) => {\n  // Calculate base scaling factor based on dataset size\n  const sizeFactor = Math.min(Math.max(\n    (movieCount - CONFIDENCE_SCALING.MIN_DATASET) / \n    (CONFIDENCE_SCALING.MAX_DATASET - CONFIDENCE_SCALING.MIN_DATASET),\n    0\n  ), 1);\n  \n  // Adjust base threshold based on dataset size\n  // Smaller datasets need higher confidence thresholds\n  const baseThreshold = CONFIDENCE_SCALING.BASE_THRESHOLD * (1 - sizeFactor * 0.3);\n  \n  // Calculate progress-based thresholds\n  const progressMultiplier = progress < 0.3 ? \n    CONFIDENCE_SCALING.EARLY_STAGE_MULTIPLIER :\n    progress > 0.7 ? \n      CONFIDENCE_SCALING.LATE_STAGE_MULTIPLIER : \n      1;\n  \n  // Calculate final threshold with bounds\n  const adaptiveThreshold = Math.min(\n    Math.max(\n      baseThreshold * progressMultiplier,\n      CONFIDENCE_SCALING.MIN_ALLOWED_THRESHOLD\n    ),\n    CONFIDENCE_SCALING.MAX_ALLOWED_THRESHOLD\n  );\n\n  return {\n    confidence: adaptiveThreshold,\n    stability: adaptiveThreshold * 0.8,\n    transitivity: adaptiveThreshold * 0.9,\n    rankChange: Math.max(0.02, 0.05 * (1 - sizeFactor))\n  };\n};\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [rankings, setRankings] = useState({});\n  const [step, setStep] = useState('input');\n  const [comparisons, setComparisons] = useState(0);\n  const [maxComparisons, setMaxComparisons] = useState(0);\n  const [pendingUpdates, setPendingUpdates] = useState([]);\n  const [recentChanges, setRecentChanges] = useState([]);\n  const [comparisonHistory, setComparisonHistory] = useState([]);\n  const [movieMomentum, setMovieMomentum] = useState({});\n\n  const CONVERGENCE_CHECK_WINDOW = 10;\n  const BASE_LEARNING_RATE = 0.1;\n\n  const VOLATILITY_WINDOW = 20; // How many recent changes to consider\n  const VOLATILITY_THRESHOLD_HIGH = 0.05; // High volatility threshold\n  const VOLATILITY_THRESHOLD_LOW = 0.01; // Low volatility threshold\n\n  const MOMENTUM_FACTOR = 0.9;\n  const MIN_LEARNING_RATE = 0.01;\n  const MAX_LEARNING_RATE = 0.2;\n\n  const EARLY_TERMINATION = {\n    MIN_PROGRESS: 0.4, // Don't terminate before 40% completion\n    MIN_COMPARISONS_PER_MOVIE: 5,\n    MIN_CONFIDENCE_THRESHOLD: 0.7,\n    STABILITY_WINDOW: 15,\n    STABILITY_THRESHOLD: 0.03,\n    MIN_TRANSITIVITY_SCORE: 0.85,\n    RELATIVE_RANK_STABILITY: 0.9\n  };\n\n  const calculateBatchParameters = useCallback((movieCount) => {\n  const scalingFactor = Math.log2(movieCount) / Math.log2(100);\n\n  // Calculate base sizes\n  const baseSizes = {\n    EARLY_STAGE_SIZE: Math.min(8, Math.max(2, Math.floor(movieCount * 0.03 * scalingFactor))),\n    MID_STAGE_SIZE: Math.min(12, Math.max(3, Math.floor(movieCount * 0.06 * scalingFactor))),\n    LATE_STAGE_SIZE: Math.min(20, Math.max(4, Math.floor(movieCount * 0.1 * scalingFactor))),\n    EARLY_STAGE_THRESHOLD: 0.15 + (0.05 * (1 - scalingFactor)),\n    LATE_STAGE_THRESHOLD: 0.65 + (0.1 * scalingFactor),\n    MIN_CONFIDENCE_THRESHOLD: 0.35 + (0.1 * scalingFactor)\n  };\n  \n  // Calculate volatility factor based on recent rating changes\n  const calculateVolatility = () => {\n    if (recentChanges.length < VOLATILITY_WINDOW) {\n      return 1; // Default to normal batch size if not enough data\n    }\n\n    // Calculate average magnitude of recent rating changes\n    const recentVolatility = recentChanges\n      .slice(-VOLATILITY_WINDOW)\n      .reduce((sum, change) => sum + Math.abs(change), 0) / VOLATILITY_WINDOW;\n\n    // Convert volatility to a scaling factor between 0.5 and 1.5\n    if (recentVolatility > VOLATILITY_THRESHOLD_HIGH) {\n      return 0.5; // High volatility = smaller batches\n    } else if (recentVolatility < VOLATILITY_THRESHOLD_LOW) {\n      return 1.5; // Low volatility = larger batches\n    } else {\n      // Linear interpolation between thresholds\n      return 1 + ((VOLATILITY_THRESHOLD_HIGH - recentVolatility) / \n                  (VOLATILITY_THRESHOLD_HIGH - VOLATILITY_THRESHOLD_LOW));\n    }\n  };\n\n  const volatilityFactor = calculateVolatility();\n  \n  // Apply volatility factor to batch sizes\n  return {\n    ...baseSizes,\n    EARLY_STAGE_SIZE: Math.max(2, Math.round(baseSizes.EARLY_STAGE_SIZE * volatilityFactor)),\n    MID_STAGE_SIZE: Math.max(3, Math.round(baseSizes.MID_STAGE_SIZE * volatilityFactor)),\n    LATE_STAGE_SIZE: Math.max(4, Math.round(baseSizes.LATE_STAGE_SIZE * volatilityFactor))\n  };\n}, [recentChanges]);\n\n  const startRanking = useCallback((movieList) => {\n    console.log(`Starting ranking process with ${movieList.length} movies`);\n    const initialRankings = movieList.reduce((acc, movie) => {\n      acc[movie.identifier] = {\n        rating: 0,\n        movie: movie,\n        wins: 0,\n        losses: 0,\n        comparisons: 0,\n        recentResults: [], // Track last N results\n        confidenceScore: 0,\n        uncertainty: 0\n      };\n      return acc;\n    }, {});\n    setMovies(movieList);\n    setRankings(initialRankings);\n    setStep('mode-selection');\n  }, []);\n\n  const selectMode = (mode, comparisonsCount) => {\n    setMaxComparisons(comparisonsCount);\n    setStep('ranking');\n  };\n\n  const finishRanking = useCallback(() => {\n    console.log(\"Finishing ranking process\");\n    setTimeout(() => {\n      setStep('results');\n    }, 0);\n  }, []);\n\n  const handleUndo = useCallback(() => {\n    if (comparisonHistory.length > 0) {\n      const newHistory = [...comparisonHistory];\n      const lastComparison = newHistory.pop();\n      setComparisonHistory(newHistory);\n      setComparisons(prev => Math.max(0, prev - 1));\n      \n      // Clear any pending updates\n      setPendingUpdates([]);\n      \n      // Reset the rankings to the previous state and provide the previous pair\n      if (lastComparison) {\n        setRankings(lastComparison.rankings);\n        // Reset recent changes since we're going back\n        setRecentChanges([]);\n        return lastComparison.pair; // Return the previous pair\n      }\n    }\n    return null;\n  }, [comparisonHistory]);\n\n  const calculateEnhancedConfidence = (movieId, rankings, allMovies) => {\n    const record = rankings[movieId];\n    if (!record || record.comparisons < CONFIDENCE_CONSTANTS.MIN_COMPARISONS) {\n      return 0.2; // Minimum baseline confidence of 20%\n    }\n  \n    // 1. Base Comparison Confidence (0-1)\n    const comparisonScore = Math.min(\n      record.comparisons / CONFIDENCE_CONSTANTS.OPTIMAL_COMPARISONS,\n      1\n    ) * 0.8 + 0.2; // Minimum 20% if at least MIN_COMPARISONS\n  \n    // 2. Position-Aware Consistency (0-1)\n    const sortedMovies = Object.values(rankings).sort((a, b) => b.rating - a.rating);\n    const position = sortedMovies.findIndex(r => r.movie.identifier === movieId);\n    const relativePosition = position / sortedMovies.length;\n    \n    let expectedWinRate;\n    if (relativePosition <= 0.25) {\n      expectedWinRate = 0.75; // Top 25% should win most\n      positionWeight = CONFIDENCE_CONSTANTS.POSITION_WEIGHTS.TOP;\n    } else if (relativePosition >= 0.75) {\n      expectedWinRate = 0.25; // Bottom 25% should lose most\n      positionWeight = CONFIDENCE_CONSTANTS.POSITION_WEIGHTS.BOTTOM;\n    } else {\n      expectedWinRate = 0.5; // Middle 50% can be mixed\n      positionWeight = CONFIDENCE_CONSTANTS.POSITION_WEIGHTS.MIDDLE;\n    }\n  \n    const actualWinRate = record.wins / record.comparisons;\n    const consistencyScore = 1 - Math.abs(actualWinRate - expectedWinRate);\n  \n    // 3. Local Performance (0-1)\n    const neighbors = sortedMovies\n      .slice(\n        Math.max(0, position - CONFIDENCE_CONSTANTS.LOCAL_RANGE),\n        Math.min(sortedMovies.length, position + CONFIDENCE_CONSTANTS.LOCAL_RANGE + 1)\n      )\n      .map(r => r.movie.identifier)\n      .filter(id => id !== movieId);\n  \n    const localComparisons = record.recentResults.filter(r => \n      neighbors.includes(r.opponent)\n    );\n    \n    const localConsistencyScore = localComparisons.length > 0\n      ? localComparisons.reduce((sum, r) => \n          sum + (r.result === (r.opponent.rating < record.rating ? 1 : 0)), \n          0\n        ) / localComparisons.length\n      : 0.5;\n  \n    // 4. Temporal Confidence (0-1)\n    const recentResults = record.recentResults.slice(-5);\n    const historicalResults = record.recentResults.slice(0, -5);\n    \n    const calculateResultsConsistency = results => {\n      if (results.length < 2) return 0.5;\n      let flips = 0;\n      for (let i = 1; i < results.length; i++) {\n        if (results[i].result !== results[i-1].result) flips++;\n      }\n      return 1 - (flips / (results.length - 1));\n    };\n  \n    const recentConsistency = calculateResultsConsistency(recentResults);\n    const historicalConsistency = calculateResultsConsistency(historicalResults);\n    \n    const temporalConsistency = \n      (recentConsistency * CONFIDENCE_CONSTANTS.RECENT_WEIGHT) +\n      (historicalConsistency * CONFIDENCE_CONSTANTS.HISTORICAL_WEIGHT);\n  \n    // 5. Transitivity Score (0-1)\n    const transitivityScore = calculateLocalTransitivity(\n      movieId, \n      rankings, \n      sortedMovies, \n      position\n    );\n  \n    // Combine all factors with weights\n    const finalConfidence = (\n      comparisonScore * 0.25 +\n      consistencyScore * 0.20 +\n      localConsistencyScore * 0.25 +\n      temporalConsistency * 0.15 +\n      transitivityScore * CONFIDENCE_CONSTANTS.TRANSITIVITY_WEIGHT\n    );\n  \n    // Ensure minimum confidence of 20% and maximum of 100%\n    return Math.min(Math.max(finalConfidence, 0.2), 1);\n  };\n  \n  const calculateLocalTransitivity = (movieId, rankings, sortedMovies, position) => {\n    const localRange = CONFIDENCE_CONSTANTS.LOCAL_RANGE;\n    const start = Math.max(0, position - localRange);\n    const end = Math.min(sortedMovies.length, position + localRange + 1);\n    const localMovies = sortedMovies.slice(start, end);\n    \n    let transitiveTriads = 0;\n    let totalTriads = 0;\n    \n    for (let i = 0; i < localMovies.length - 2; i++) {\n      for (let j = i + 1; j < localMovies.length - 1; j++) {\n        for (let k = j + 1; k < localMovies.length; k++) {\n          const [a, b, c] = [localMovies[i], localMovies[j], localMovies[k]]\n            .map(m => m.movie.identifier);\n          \n          // Only count triads where we have comparisons between all pairs\n          const hasAllComparisons = rankings[a].recentResults.some(r => \n            r.opponent === b || r.opponent === c\n          ) && rankings[b].recentResults.some(r => \n            r.opponent === c\n          );\n          \n          if (hasAllComparisons) {\n            totalTriads++;\n            const isTransitive = (rankings[a].rating > rankings[b].rating &&\n                                 rankings[b].rating > rankings[c].rating &&\n                                 rankings[a].rating > rankings[c].rating) ||\n                                (rankings[c].rating > rankings[b].rating &&\n                                 rankings[b].rating > rankings[a].rating &&\n                                 rankings[c].rating > rankings[a].rating);\n            if (isTransitive) transitiveTriads++;\n          }\n        }\n      }\n    }\n    \n    return totalTriads > 0 ? transitiveTriads / totalTriads : 0.5;\n  };\n  \n  const checkTransitivityViolation = useCallback((winner, loser) => {\n    const winnerRating = rankings[winner].rating;\n    const loserRating = rankings[loser].rating;\n    \n    // If the winner's current rating is lower, this is a transitivity violation\n    if (winnerRating < loserRating) {\n      console.log(`Transitivity violation detected: ${winner} (${winnerRating}) beat ${loser} (${loserRating})`);\n      return true;\n    }\n    return false;\n  }, [rankings]);\n\n  const getDynamicLearningRate = useCallback((winner, loser) => {\n    const progress = comparisons / maxComparisons;\n    const ratingDiff = Math.abs(rankings[winner].rating - rankings[loser].rating);\n    const winnerConfidence = calculateConfidence(winner);\n    const loserConfidence = calculateConfidence(loser);\n    \n    // Start with base learning rate\n    let learningRate = BASE_LEARNING_RATE;\n    \n    // Adjust based on progress\n    learningRate *= (1 - progress * 0.5);\n    \n    // Adjust for rating difference\n    const surpriseFactor = 1 / (1 + Math.exp(-5 * (1 - ratingDiff)));\n    learningRate *= (1 + surpriseFactor);\n    \n    // Confidence adjustment\n    const confidenceFactor = 1 - (winnerConfidence + loserConfidence) / 4;\n    learningRate *= confidenceFactor;\n    \n    // Transitivity violation adjustment\n    if (checkTransitivityViolation(winner, loser)) {\n      learningRate *= 1.5;\n    }\n    \n    // Apply momentum if available\n    const winnerMomentum = movieMomentum[winner] || 0;\n    const loserMomentum = movieMomentum[loser] || 0;\n    const avgMomentum = (Math.abs(winnerMomentum) + Math.abs(loserMomentum)) / 2;\n    learningRate *= (1 + avgMomentum * MOMENTUM_FACTOR);\n    \n    // Clamp learning rate\n    return Math.max(MIN_LEARNING_RATE, Math.min(MAX_LEARNING_RATE, learningRate));\n  }, [comparisons, maxComparisons, rankings, checkTransitivityViolation, calculateConfidence, movieMomentum]);\n  \n  const calculateOptimalBatchSize = useCallback(() => {\n    const movieCount = movies.length;\n    const batchParams = calculateBatchParameters(movieCount);\n    const progress = comparisons / maxComparisons;\n    \n    // Calculate average confidence across all movies\n    const avgConfidence = Object.values(rankings).reduce((sum, record) => {\n      return sum + (record && record.movie ? calculateConfidence(record.movie.identifier) : 0);\n    }, 0) / movieCount;\n  \n    console.log(`Current batch parameters for ${movieCount} movies:`, {\n      early: batchParams.EARLY_STAGE_SIZE,\n      mid: batchParams.MID_STAGE_SIZE,\n      late: batchParams.LATE_STAGE_SIZE,\n      progress: progress.toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2)\n    });\n  \n    // Determine stage based on progress\n    if (progress < batchParams.EARLY_STAGE_THRESHOLD) {\n      return batchParams.EARLY_STAGE_SIZE;\n    } else if (progress > batchParams.LATE_STAGE_THRESHOLD) {\n      return batchParams.LATE_STAGE_SIZE;\n    } else {\n      return avgConfidence < batchParams.MIN_CONFIDENCE_THRESHOLD \n        ? batchParams.EARLY_STAGE_SIZE \n        : batchParams.MID_STAGE_SIZE;\n    }\n  }, [movies.length, comparisons, maxComparisons, rankings, calculateConfidence, calculateBatchParameters]);\n\n  const calculateTransitivityScore = useCallback(() => {\n    let transitiveTriads = 0;\n    let totalTriads = 0;\n  \n    // Get sorted movies by rating\n    const sortedMovies = Object.values(rankings)\n      .sort((a, b) => b.rating - a.rating)\n      .map(r => r.movie.identifier);\n  \n    // Check random sample of triads for transitivity\n    const sampleSize = Math.min(1000, Math.floor(sortedMovies.length * (sortedMovies.length - 1) * (sortedMovies.length - 2) / 6));\n    \n    for (let i = 0; i < sampleSize; i++) {\n      const idx1 = Math.floor(Math.random() * sortedMovies.length);\n      const idx2 = Math.floor(Math.random() * sortedMovies.length);\n      const idx3 = Math.floor(Math.random() * sortedMovies.length);\n      \n      if (idx1 !== idx2 && idx2 !== idx3 && idx1 !== idx3) {\n        totalTriads++;\n        const [a, b, c] = [sortedMovies[idx1], sortedMovies[idx2], sortedMovies[idx3]].sort(\n          (x, y) => rankings[y].rating - rankings[x].rating\n        );\n        \n        if (rankings[a].rating > rankings[b].rating && \n            rankings[b].rating > rankings[c].rating && \n            rankings[a].rating > rankings[c].rating) {\n          transitiveTriads++;\n        }\n      }\n    }\n  \n    return totalTriads > 0 ? transitiveTriads / totalTriads : 0;\n  }, [rankings]);\n  \n  const calculateRankStability = useCallback(() => {\n    if (comparisonHistory.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return 0;\n    }\n  \n    const currentRanking = Object.values(rankings)\n      .sort((a, b) => b.rating - a.rating)\n      .map(r => r.movie.identifier);\n  \n    const previousRanking = Object.values(\n      comparisonHistory[comparisonHistory.length - EARLY_TERMINATION.STABILITY_WINDOW].rankings\n    )\n      .sort((a, b) => b.rating - a.rating)\n      .map(r => r.movie.identifier);\n  \n    let stabilityScore = 0;\n    for (let i = 0; i < currentRanking.length; i++) {\n      const previousIndex = previousRanking.indexOf(currentRanking[i]);\n      const maxPossibleDiff = currentRanking.length - 1;\n      const actualDiff = Math.abs(i - previousIndex);\n      stabilityScore += 1 - (actualDiff / maxPossibleDiff);\n    }\n  \n    return stabilityScore / currentRanking.length;\n  }, [rankings, comparisonHistory, EARLY_TERMINATION.STABILITY_WINDOW]);\n\n  const checkRankingStability = useCallback(() => {\n    const progress = comparisons / maxComparisons;\n    const adaptiveThresholds = calculateAdaptiveThresholds(movies.length, progress);\n    \n    // Don't check before minimum progress\n    if (comparisons / maxComparisons < EARLY_TERMINATION.MIN_PROGRESS) {\n      return false;\n    }\n  \n    // Check minimum comparisons per movie\n    const insufficientComparisons = Object.values(rankings).some(\n      record => record.comparisons < EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE\n    );\n    if (insufficientComparisons) {\n      return false;\n    }\n  \n    // Calculate average confidence with adaptive threshold\n    const avgConfidence = Object.values(rankings).reduce(\n      (sum, record) => sum + calculateConfidence(record.movie.identifier),\n      0\n    ) / movies.length;\n    if (avgConfidence < Math.max(adaptiveThresholds.confidence, EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD)) {\n      return false;\n    }\n  \n    // Check recent stability with adaptive threshold\n    if (recentChanges.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return false;\n    }\n    const recentInstability = recentChanges\n      .slice(-EARLY_TERMINATION.STABILITY_WINDOW)\n      .some(change => Math.abs(change) > Math.min(adaptiveThresholds.rankChange, EARLY_TERMINATION.STABILITY_THRESHOLD));\n    if (recentInstability) {\n      return false;\n    }\n  \n    // Check transitivity with adaptive threshold\n    const transitivityScore = calculateTransitivityScore();\n    if (transitivityScore < Math.max(adaptiveThresholds.transitivity, EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE)) {\n      return false;\n    }\n  \n    // Check relative rank stability with adaptive threshold\n    const rankStability = calculateRankStability();\n    if (rankStability < Math.max(adaptiveThresholds.stability, EARLY_TERMINATION.RELATIVE_RANK_STABILITY)) {\n      return false;\n    }\n  \n    console.log('Early termination conditions met:', {\n      progress: (comparisons / maxComparisons).toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2),\n      transitivityScore: transitivityScore.toFixed(2),\n      rankStability: rankStability.toFixed(2),\n      adaptiveThresholds: {\n        confidence: adaptiveThresholds.confidence.toFixed(2),\n        stability: adaptiveThresholds.stability.toFixed(2),\n        transitivity: adaptiveThresholds.transitivity.toFixed(2),\n        rankChange: adaptiveThresholds.rankChange.toFixed(3)\n      }\n    });\n  \n    return true;\n  }, [\n    movies.length,\n    comparisons,\n    maxComparisons,\n    rankings,\n    recentChanges,\n    calculateConfidence,\n    calculateTransitivityScore,\n    calculateRankStability,\n    EARLY_TERMINATION.MIN_PROGRESS,\n    EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE,\n    EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD,\n    EARLY_TERMINATION.STABILITY_WINDOW,\n    EARLY_TERMINATION.STABILITY_THRESHOLD,\n    EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE,\n    EARLY_TERMINATION.RELATIVE_RANK_STABILITY\n  ]);\n\nconst checkConvergence = useCallback(() => {\n  if (checkRankingStability()) {\n    console.log(\"Rankings have converged with high confidence - finishing early\");\n    finishRanking();\n  }\n}, [checkRankingStability, finishRanking]);\n\nconst processBatchUpdate = useCallback((updates) => {\n  setRankings(prevRankings => {\n    const newRankings = { ...prevRankings };\n    const newMomentum = { ...movieMomentum };\n    \n    updates.forEach(({ winner, loser }) => {\n      const learningRate = getDynamicLearningRate(winner, loser);\n      \n      const winnerStrength = Math.exp(prevRankings[winner].rating);\n      const loserStrength = Math.exp(prevRankings[loser].rating);\n      \n      const expectedProbWinner = winnerStrength / (winnerStrength + loserStrength);\n      const ratingChange = learningRate * (1 - expectedProbWinner);\n      \n      // Update momentum\n      newMomentum[winner] = (newMomentum[winner] || 0) * MOMENTUM_FACTOR + ratingChange;\n      newMomentum[loser] = (newMomentum[loser] || 0) * MOMENTUM_FACTOR - ratingChange;\n      \n      // Update ratings with momentum influence\n      newRankings[winner] = {\n        ...newRankings[winner],\n        rating: prevRankings[winner].rating + ratingChange + newMomentum[winner] * MOMENTUM_FACTOR,\n        wins: prevRankings[winner].wins + 1,\n        comparisons: prevRankings[winner].comparisons + 1,\n        recentResults: [...prevRankings[winner].recentResults.slice(-9), 1]\n      };\n      \n      newRankings[loser] = {\n        ...newRankings[loser],\n        rating: prevRankings[loser].rating - ratingChange + newMomentum[loser] * MOMENTUM_FACTOR,\n        losses: prevRankings[loser].losses + 1,\n        comparisons: prevRankings[loser].comparisons + 1,\n        recentResults: [...prevRankings[loser].recentResults.slice(-9), 0]\n      };\n      \n      setRecentChanges(prev => [...prev.slice(-CONVERGENCE_CHECK_WINDOW + 1), ratingChange]);\n    });\n    \n    setMovieMomentum(newMomentum);\n    return newRankings;\n  });\n  \n  checkConvergence();\n}, [getDynamicLearningRate, checkConvergence, movieMomentum]);\n\nconst updateRankings = useCallback((winnerIdentifier, loserIdentifier, currentPair) => {\n    // Save current state to history\n    setComparisonHistory(prev => [...prev, {\n      winner: winnerIdentifier,\n      loser: loserIdentifier,\n      rankings: { ...rankings },\n      pair: currentPair  // Use currentPair instead of pair\n    }]);\n\n    // Add to pending updates and process if optimal batch size reached\n    setPendingUpdates(prev => {\n      const newPending = [...prev, { winner: winnerIdentifier, loser: loserIdentifier }];\n      const optimalBatchSize = calculateOptimalBatchSize();\n      \n      if (newPending.length >= optimalBatchSize) {\n        console.log(`Processing batch of size ${optimalBatchSize}`);\n        processBatchUpdate(newPending);\n        return [];\n      }\n      return newPending;\n    });\n\n    setComparisons(prev => prev + 1);\n  }, [rankings, processBatchUpdate, calculateOptimalBatchSize]);\n\n  useEffect(() => {\n    if (step === 'results' && pendingUpdates.length > 0) {\n      processBatchUpdate(pendingUpdates);\n      setPendingUpdates([]);\n    }\n  }, [step, pendingUpdates, processBatchUpdate]);\n\n  const memoizedRankingProcess = useMemo(() => (\n    <RankingProcess \n      movies={movies} \n      rankings={rankings}\n      comparisons={comparisons}\n      maxComparisons={maxComparisons}\n      calculateConfidence={calculateConfidence}\n      onChoose={updateRankings} \n      onFinish={finishRanking}\n      onUndo={handleUndo}\n    />\n  ), [movies, rankings, comparisons, maxComparisons, calculateConfidence, updateRankings, finishRanking, handleUndo]);\n\n  // Around line 563, update the return statement:\n// Around line 563, update the return statement to make backgrounds consistent\n// Around line 563, update the return statement with solid background and texture\n// Around line 563, clean return statement with solid background\nreturn (\n  <div className=\"min-h-screen bg-base-100 text-base-content font-sans\">\n    {step === 'input' ? (\n      <div className=\"min-h-screen flex flex-col items-center px-4\">\n        <h1 className=\"text-6xl font-crimson font-bold mt-12 mb-16 animate-fade-in\">\n          RankBoxd\n        </h1>\n        <InputForm onSubmit={startRanking} />\n      </div>\n    ) : (\n      <div className=\"flex flex-col min-h-screen\">\n        <ProgressBar currentStep={step} />\n        <main className=\"flex-grow\">\n          {step === 'mode-selection' && (\n            <ModeSelection \n              movies={movies} \n              onModeSelect={selectMode}\n            />\n          )}\n          {step === 'ranking' && memoizedRankingProcess}\n          {step === 'results' && (\n            <MovieResults\n              rankings={Object.values(rankings)}\n              calculateConfidence={calculateConfidence}\n            />\n          )}\n        </main>\n        \n        {(step === 'ranking' || step === 'results') && (\n          <StatusBar\n            comparisons={comparisons}\n            maxComparisons={maxComparisons}\n            avgConfidence={Object.values(rankings).reduce((sum, r) => sum + calculateConfidence(r.movie.identifier), 0) / movies.length}\n            stabilityScore={calculateRankStability()}\n            estimatedMinutesLeft={Math.ceil((maxComparisons - comparisons) * 0.1)}\n          />\n        )}\n      </div>\n    )}\n  </div>\n);\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}