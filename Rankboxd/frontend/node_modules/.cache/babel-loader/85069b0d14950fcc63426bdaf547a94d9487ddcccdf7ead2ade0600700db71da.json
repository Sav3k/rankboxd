{"ast":null,"code":"var _jsxFileName = \"/Users/kilianreichl/RBDev/rankboxd/src/App.js\",\n  _s2 = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport InputForm from './components/InputForm';\nimport RankingProcess from './components/RankingProcess';\nimport MovieResults from './components/Results';\nimport ProgressBar from './components/ProgressBar';\nimport ModeSelection from './components/ModeSelection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CONFIDENCE_SCALING = {\n  BASE_THRESHOLD: 0.7,\n  MIN_DATASET: 10,\n  MAX_DATASET: 500,\n  EARLY_STAGE_MULTIPLIER: 0.8,\n  LATE_STAGE_MULTIPLIER: 1.2,\n  MIN_ALLOWED_THRESHOLD: 0.5,\n  MAX_ALLOWED_THRESHOLD: 0.9\n};\nconst calculateAdaptiveThresholds = (movieCount, progress) => {\n  // Calculate base scaling factor based on dataset size\n  const sizeFactor = Math.min(Math.max((movieCount - CONFIDENCE_SCALING.MIN_DATASET) / (CONFIDENCE_SCALING.MAX_DATASET - CONFIDENCE_SCALING.MIN_DATASET), 0), 1);\n\n  // Adjust base threshold based on dataset size\n  // Smaller datasets need higher confidence thresholds\n  const baseThreshold = CONFIDENCE_SCALING.BASE_THRESHOLD * (1 - sizeFactor * 0.3);\n\n  // Calculate progress-based thresholds\n  const progressMultiplier = progress < 0.3 ? CONFIDENCE_SCALING.EARLY_STAGE_MULTIPLIER : progress > 0.7 ? CONFIDENCE_SCALING.LATE_STAGE_MULTIPLIER : 1;\n\n  // Calculate final threshold with bounds\n  const adaptiveThreshold = Math.min(Math.max(baseThreshold * progressMultiplier, CONFIDENCE_SCALING.MIN_ALLOWED_THRESHOLD), CONFIDENCE_SCALING.MAX_ALLOWED_THRESHOLD);\n  return {\n    confidence: adaptiveThreshold,\n    stability: adaptiveThreshold * 0.8,\n    transitivity: adaptiveThreshold * 0.9,\n    rankChange: Math.max(0.02, 0.05 * (1 - sizeFactor))\n  };\n};\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [movies, setMovies] = useState([]);\n  const [rankings, setRankings] = useState({});\n  const [step, setStep] = useState('input');\n  const [comparisons, setComparisons] = useState(0);\n  const [maxComparisons, setMaxComparisons] = useState(0);\n  const [pendingUpdates, setPendingUpdates] = useState([]);\n  const [recentChanges, setRecentChanges] = useState([]);\n  const [comparisonHistory, setComparisonHistory] = useState([]);\n  const [movieMomentum, setMovieMomentum] = useState({});\n  const CONVERGENCE_CHECK_WINDOW = 10;\n  const BASE_LEARNING_RATE = 0.1;\n  const VOLATILITY_WINDOW = 20; // How many recent changes to consider\n  const VOLATILITY_THRESHOLD_HIGH = 0.05; // High volatility threshold\n  const VOLATILITY_THRESHOLD_LOW = 0.01; // Low volatility threshold\n\n  const MOMENTUM_FACTOR = 0.9;\n  const MIN_LEARNING_RATE = 0.01;\n  const MAX_LEARNING_RATE = 0.2;\n  const EARLY_TERMINATION = {\n    MIN_PROGRESS: 0.4,\n    // Don't terminate before 40% completion\n    MIN_COMPARISONS_PER_MOVIE: 5,\n    MIN_CONFIDENCE_THRESHOLD: 0.7,\n    STABILITY_WINDOW: 15,\n    STABILITY_THRESHOLD: 0.03,\n    MIN_TRANSITIVITY_SCORE: 0.85,\n    RELATIVE_RANK_STABILITY: 0.9\n  };\n  const calculateBatchParameters = _s(useCallback(_s(movieCount => {\n    _s();\n    const scalingFactor = Math.log2(movieCount) / Math.log2(100);\n    const [mousePosition, setMousePosition] = useState({\n      x: 0,\n      y: 0\n    });\n    const updateMousePosition = useCallback(e => {\n      setMousePosition({\n        x: e.clientX,\n        y: e.clientY\n      });\n    }, []);\n\n    // Calculate base sizes\n    const baseSizes = {\n      EARLY_STAGE_SIZE: Math.min(8, Math.max(2, Math.floor(movieCount * 0.03 * scalingFactor))),\n      MID_STAGE_SIZE: Math.min(12, Math.max(3, Math.floor(movieCount * 0.06 * scalingFactor))),\n      LATE_STAGE_SIZE: Math.min(20, Math.max(4, Math.floor(movieCount * 0.1 * scalingFactor))),\n      EARLY_STAGE_THRESHOLD: 0.15 + 0.05 * (1 - scalingFactor),\n      LATE_STAGE_THRESHOLD: 0.65 + 0.1 * scalingFactor,\n      MIN_CONFIDENCE_THRESHOLD: 0.35 + 0.1 * scalingFactor\n    };\n\n    // Calculate volatility factor based on recent rating changes\n    const calculateVolatility = () => {\n      if (recentChanges.length < VOLATILITY_WINDOW) {\n        return 1; // Default to normal batch size if not enough data\n      }\n\n      // Calculate average magnitude of recent rating changes\n      const recentVolatility = recentChanges.slice(-VOLATILITY_WINDOW).reduce((sum, change) => sum + Math.abs(change), 0) / VOLATILITY_WINDOW;\n\n      // Convert volatility to a scaling factor between 0.5 and 1.5\n      if (recentVolatility > VOLATILITY_THRESHOLD_HIGH) {\n        return 0.5; // High volatility = smaller batches\n      } else if (recentVolatility < VOLATILITY_THRESHOLD_LOW) {\n        return 1.5; // Low volatility = larger batches\n      } else {\n        // Linear interpolation between thresholds\n        return 1 + (VOLATILITY_THRESHOLD_HIGH - recentVolatility) / (VOLATILITY_THRESHOLD_HIGH - VOLATILITY_THRESHOLD_LOW);\n      }\n    };\n    const volatilityFactor = calculateVolatility();\n\n    // Apply volatility factor to batch sizes\n    return {\n      ...baseSizes,\n      EARLY_STAGE_SIZE: Math.max(2, Math.round(baseSizes.EARLY_STAGE_SIZE * volatilityFactor)),\n      MID_STAGE_SIZE: Math.max(3, Math.round(baseSizes.MID_STAGE_SIZE * volatilityFactor)),\n      LATE_STAGE_SIZE: Math.max(4, Math.round(baseSizes.LATE_STAGE_SIZE * volatilityFactor))\n    };\n  }, \"VSFJEswXW61BKNulCZdER5iS8/c=\"), [recentChanges]), \"VSFJEswXW61BKNulCZdER5iS8/c=\");\n  const startRanking = useCallback(movieList => {\n    console.log(`Starting ranking process with ${movieList.length} movies`);\n    const initialRankings = movieList.reduce((acc, movie) => {\n      acc[movie.identifier] = {\n        rating: 0,\n        movie: movie,\n        wins: 0,\n        losses: 0,\n        comparisons: 0,\n        recentResults: [],\n        // Track last N results\n        confidenceScore: 0,\n        uncertainty: 0\n      };\n      return acc;\n    }, {});\n    setMovies(movieList);\n    setRankings(initialRankings);\n    setStep('mode-selection');\n  }, []);\n  const selectMode = (mode, comparisonsCount) => {\n    setMaxComparisons(comparisonsCount);\n    setStep('ranking');\n  };\n  const finishRanking = useCallback(() => {\n    console.log(\"Finishing ranking process\");\n    setTimeout(() => {\n      setStep('results');\n    }, 0);\n  }, []);\n  const handleUndo = useCallback(() => {\n    if (comparisonHistory.length > 0) {\n      const newHistory = [...comparisonHistory];\n      const lastComparison = newHistory.pop();\n      setComparisonHistory(newHistory);\n      setComparisons(prev => Math.max(0, prev - 1));\n\n      // Clear any pending updates\n      setPendingUpdates([]);\n\n      // Reset the rankings to the previous state\n      if (lastComparison) {\n        setRankings(lastComparison.rankings);\n        // Reset recent changes since we're going back\n        setRecentChanges([]);\n      }\n    }\n  }, [comparisonHistory]);\n  const calculateConfidence = useMemo(() => movieId => {\n    if (!rankings[movieId]) {\n      console.warn(`No ranking found for movie ID: ${movieId}`);\n      return 0;\n    }\n    const record = rankings[movieId];\n    if (!record.comparisons) {\n      return 0;\n    }\n    const totalComparisons = record.comparisons;\n    const winRatio = record.wins / totalComparisons;\n    const consistency = 1 - Math.abs(0.5 - winRatio) * 2;\n    const ratingDiff = Math.abs(record.rating);\n    return Math.sqrt(totalComparisons) * (1 - consistency) * (1 / (1 + ratingDiff));\n  }, [rankings]);\n  const checkTransitivityViolation = useCallback((winner, loser) => {\n    const winnerRating = rankings[winner].rating;\n    const loserRating = rankings[loser].rating;\n\n    // If the winner's current rating is lower, this is a transitivity violation\n    if (winnerRating < loserRating) {\n      console.log(`Transitivity violation detected: ${winner} (${winnerRating}) beat ${loser} (${loserRating})`);\n      return true;\n    }\n    return false;\n  }, [rankings]);\n  const getDynamicLearningRate = useCallback((winner, loser) => {\n    const progress = comparisons / maxComparisons;\n    const ratingDiff = Math.abs(rankings[winner].rating - rankings[loser].rating);\n    const winnerConfidence = calculateConfidence(winner);\n    const loserConfidence = calculateConfidence(loser);\n\n    // Start with base learning rate\n    let learningRate = BASE_LEARNING_RATE;\n\n    // Adjust based on progress\n    learningRate *= 1 - progress * 0.5;\n\n    // Adjust for rating difference\n    const surpriseFactor = 1 / (1 + Math.exp(-5 * (1 - ratingDiff)));\n    learningRate *= 1 + surpriseFactor;\n\n    // Confidence adjustment\n    const confidenceFactor = 1 - (winnerConfidence + loserConfidence) / 4;\n    learningRate *= confidenceFactor;\n\n    // Transitivity violation adjustment\n    if (checkTransitivityViolation(winner, loser)) {\n      learningRate *= 1.5;\n    }\n\n    // Apply momentum if available\n    const winnerMomentum = movieMomentum[winner] || 0;\n    const loserMomentum = movieMomentum[loser] || 0;\n    const avgMomentum = (Math.abs(winnerMomentum) + Math.abs(loserMomentum)) / 2;\n    learningRate *= 1 + avgMomentum * MOMENTUM_FACTOR;\n\n    // Clamp learning rate\n    return Math.max(MIN_LEARNING_RATE, Math.min(MAX_LEARNING_RATE, learningRate));\n  }, [comparisons, maxComparisons, rankings, checkTransitivityViolation, calculateConfidence, movieMomentum]);\n  const calculateOptimalBatchSize = useCallback(() => {\n    const movieCount = movies.length;\n    const batchParams = calculateBatchParameters(movieCount);\n    const progress = comparisons / maxComparisons;\n\n    // Calculate average confidence across all movies\n    const avgConfidence = Object.values(rankings).reduce((sum, record) => {\n      return sum + (record && record.movie ? calculateConfidence(record.movie.identifier) : 0);\n    }, 0) / movieCount;\n    console.log(`Current batch parameters for ${movieCount} movies:`, {\n      early: batchParams.EARLY_STAGE_SIZE,\n      mid: batchParams.MID_STAGE_SIZE,\n      late: batchParams.LATE_STAGE_SIZE,\n      progress: progress.toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2)\n    });\n\n    // Determine stage based on progress\n    if (progress < batchParams.EARLY_STAGE_THRESHOLD) {\n      return batchParams.EARLY_STAGE_SIZE;\n    } else if (progress > batchParams.LATE_STAGE_THRESHOLD) {\n      return batchParams.LATE_STAGE_SIZE;\n    } else {\n      return avgConfidence < batchParams.MIN_CONFIDENCE_THRESHOLD ? batchParams.EARLY_STAGE_SIZE : batchParams.MID_STAGE_SIZE;\n    }\n  }, [movies.length, comparisons, maxComparisons, rankings, calculateConfidence, calculateBatchParameters]);\n  const calculateTransitivityScore = useCallback(() => {\n    let transitiveTriads = 0;\n    let totalTriads = 0;\n\n    // Get sorted movies by rating\n    const sortedMovies = Object.values(rankings).sort((a, b) => b.rating - a.rating).map(r => r.movie.identifier);\n\n    // Check random sample of triads for transitivity\n    const sampleSize = Math.min(1000, Math.floor(sortedMovies.length * (sortedMovies.length - 1) * (sortedMovies.length - 2) / 6));\n    for (let i = 0; i < sampleSize; i++) {\n      const idx1 = Math.floor(Math.random() * sortedMovies.length);\n      const idx2 = Math.floor(Math.random() * sortedMovies.length);\n      const idx3 = Math.floor(Math.random() * sortedMovies.length);\n      if (idx1 !== idx2 && idx2 !== idx3 && idx1 !== idx3) {\n        totalTriads++;\n        const [a, b, c] = [sortedMovies[idx1], sortedMovies[idx2], sortedMovies[idx3]].sort((x, y) => rankings[y].rating - rankings[x].rating);\n        if (rankings[a].rating > rankings[b].rating && rankings[b].rating > rankings[c].rating && rankings[a].rating > rankings[c].rating) {\n          transitiveTriads++;\n        }\n      }\n    }\n    return totalTriads > 0 ? transitiveTriads / totalTriads : 0;\n  }, [rankings]);\n  const calculateRankStability = useCallback(() => {\n    if (comparisonHistory.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return 0;\n    }\n    const currentRanking = Object.values(rankings).sort((a, b) => b.rating - a.rating).map(r => r.movie.identifier);\n    const previousRanking = Object.values(comparisonHistory[comparisonHistory.length - EARLY_TERMINATION.STABILITY_WINDOW].rankings).sort((a, b) => b.rating - a.rating).map(r => r.movie.identifier);\n    let stabilityScore = 0;\n    for (let i = 0; i < currentRanking.length; i++) {\n      const previousIndex = previousRanking.indexOf(currentRanking[i]);\n      const maxPossibleDiff = currentRanking.length - 1;\n      const actualDiff = Math.abs(i - previousIndex);\n      stabilityScore += 1 - actualDiff / maxPossibleDiff;\n    }\n    return stabilityScore / currentRanking.length;\n  }, [rankings, comparisonHistory, EARLY_TERMINATION.STABILITY_WINDOW]);\n  const checkRankingStability = useCallback(() => {\n    const progress = comparisons / maxComparisons;\n    const adaptiveThresholds = calculateAdaptiveThresholds(movies.length, progress);\n\n    // Don't check before minimum progress\n    if (comparisons / maxComparisons < EARLY_TERMINATION.MIN_PROGRESS) {\n      return false;\n    }\n\n    // Check minimum comparisons per movie\n    const insufficientComparisons = Object.values(rankings).some(record => record.comparisons < EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE);\n    if (insufficientComparisons) {\n      return false;\n    }\n\n    // Calculate average confidence with adaptive threshold\n    const avgConfidence = Object.values(rankings).reduce((sum, record) => sum + calculateConfidence(record.movie.identifier), 0) / movies.length;\n    if (avgConfidence < Math.max(adaptiveThresholds.confidence, EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD)) {\n      return false;\n    }\n\n    // Check recent stability with adaptive threshold\n    if (recentChanges.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return false;\n    }\n    const recentInstability = recentChanges.slice(-EARLY_TERMINATION.STABILITY_WINDOW).some(change => Math.abs(change) > Math.min(adaptiveThresholds.rankChange, EARLY_TERMINATION.STABILITY_THRESHOLD));\n    if (recentInstability) {\n      return false;\n    }\n\n    // Check transitivity with adaptive threshold\n    const transitivityScore = calculateTransitivityScore();\n    if (transitivityScore < Math.max(adaptiveThresholds.transitivity, EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE)) {\n      return false;\n    }\n\n    // Check relative rank stability with adaptive threshold\n    const rankStability = calculateRankStability();\n    if (rankStability < Math.max(adaptiveThresholds.stability, EARLY_TERMINATION.RELATIVE_RANK_STABILITY)) {\n      return false;\n    }\n    console.log('Early termination conditions met:', {\n      progress: (comparisons / maxComparisons).toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2),\n      transitivityScore: transitivityScore.toFixed(2),\n      rankStability: rankStability.toFixed(2),\n      adaptiveThresholds: {\n        confidence: adaptiveThresholds.confidence.toFixed(2),\n        stability: adaptiveThresholds.stability.toFixed(2),\n        transitivity: adaptiveThresholds.transitivity.toFixed(2),\n        rankChange: adaptiveThresholds.rankChange.toFixed(3)\n      }\n    });\n    return true;\n  }, [movies.length, comparisons, maxComparisons, rankings, recentChanges, calculateConfidence, calculateTransitivityScore, calculateRankStability, EARLY_TERMINATION.MIN_PROGRESS, EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE, EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD, EARLY_TERMINATION.STABILITY_WINDOW, EARLY_TERMINATION.STABILITY_THRESHOLD, EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE, EARLY_TERMINATION.RELATIVE_RANK_STABILITY]);\n  const checkConvergence = useCallback(() => {\n    if (checkRankingStability()) {\n      console.log(\"Rankings have converged with high confidence - finishing early\");\n      finishRanking();\n    }\n  }, [checkRankingStability, finishRanking]);\n  const processBatchUpdate = useCallback(updates => {\n    setRankings(prevRankings => {\n      const newRankings = {\n        ...prevRankings\n      };\n      const newMomentum = {\n        ...movieMomentum\n      };\n      updates.forEach(({\n        winner,\n        loser\n      }) => {\n        const learningRate = getDynamicLearningRate(winner, loser);\n        const winnerStrength = Math.exp(prevRankings[winner].rating);\n        const loserStrength = Math.exp(prevRankings[loser].rating);\n        const expectedProbWinner = winnerStrength / (winnerStrength + loserStrength);\n        const ratingChange = learningRate * (1 - expectedProbWinner);\n\n        // Update momentum\n        newMomentum[winner] = (newMomentum[winner] || 0) * MOMENTUM_FACTOR + ratingChange;\n        newMomentum[loser] = (newMomentum[loser] || 0) * MOMENTUM_FACTOR - ratingChange;\n\n        // Update ratings with momentum influence\n        newRankings[winner] = {\n          ...newRankings[winner],\n          rating: prevRankings[winner].rating + ratingChange + newMomentum[winner] * MOMENTUM_FACTOR,\n          wins: prevRankings[winner].wins + 1,\n          comparisons: prevRankings[winner].comparisons + 1,\n          recentResults: [...prevRankings[winner].recentResults.slice(-9), 1]\n        };\n        newRankings[loser] = {\n          ...newRankings[loser],\n          rating: prevRankings[loser].rating - ratingChange + newMomentum[loser] * MOMENTUM_FACTOR,\n          losses: prevRankings[loser].losses + 1,\n          comparisons: prevRankings[loser].comparisons + 1,\n          recentResults: [...prevRankings[loser].recentResults.slice(-9), 0]\n        };\n        setRecentChanges(prev => [...prev.slice(-CONVERGENCE_CHECK_WINDOW + 1), ratingChange]);\n      });\n      setMovieMomentum(newMomentum);\n      return newRankings;\n    });\n    checkConvergence();\n  }, [getDynamicLearningRate, checkConvergence, movieMomentum]);\n  const updateRankings = useCallback((winnerIdentifier, loserIdentifier) => {\n    // Save current state to history\n    setComparisonHistory(prev => [...prev, {\n      winner: winnerIdentifier,\n      loser: loserIdentifier,\n      rankings: {\n        ...rankings\n      }\n    }]);\n\n    // Add to pending updates and process if optimal batch size reached\n    setPendingUpdates(prev => {\n      const newPending = [...prev, {\n        winner: winnerIdentifier,\n        loser: loserIdentifier\n      }];\n      const optimalBatchSize = calculateOptimalBatchSize();\n      if (newPending.length >= optimalBatchSize) {\n        console.log(`Processing batch of size ${optimalBatchSize}`);\n        processBatchUpdate(newPending);\n        return [];\n      }\n      return newPending;\n    });\n    setComparisons(prev => prev + 1);\n  }, [rankings, processBatchUpdate, calculateOptimalBatchSize]);\n  useEffect(() => {\n    if (step === 'results' && pendingUpdates.length > 0) {\n      processBatchUpdate(pendingUpdates);\n      setPendingUpdates([]);\n    }\n  }, [step, pendingUpdates, processBatchUpdate]);\n  const memoizedRankingProcess = useMemo(() => /*#__PURE__*/_jsxDEV(RankingProcess, {\n    movies: movies,\n    rankings: rankings,\n    comparisons: comparisons,\n    maxComparisons: maxComparisons,\n    calculateConfidence: calculateConfidence,\n    onChoose: updateRankings,\n    onFinish: finishRanking,\n    onUndo: handleUndo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 517,\n    columnNumber: 5\n  }, this), [movies, rankings, comparisons, maxComparisons, calculateConfidence, updateRankings, finishRanking, handleUndo]);\n\n  // Around line 563, update the return statement:\n  // Around line 563, update the return statement to make backgrounds consistent\n  // Around line 563, update the return statement with solid background and texture\n  // Around line 563, clean return statement with solid background\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-base-100 text-base-content font-sans\",\n    children: step === 'input' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col items-center px-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-6xl font-crimson font-bold mt-12 mb-16 animate-fade-in\",\n        children: \"RankBoxd\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n        onSubmit: startRanking\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col min-h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        currentStep: step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"flex-grow\",\n        children: [step === 'mode-selection' && /*#__PURE__*/_jsxDEV(ModeSelection, {\n          movies: movies,\n          onModeSelect: selectMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), step === 'ranking' && memoizedRankingProcess, step === 'results' && /*#__PURE__*/_jsxDEV(MovieResults, {\n          rankings: Object.values(rankings),\n          calculateConfidence: calculateConfidence\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 9\n      }, this), (step === 'ranking' || step === 'results') && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sticky bottom-0 w-full bg-base-200 border-t border-base-300 shadow-lg\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container mx-auto px-4 py-3 flex justify-between items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm text-base-content/70\",\n            children: step === 'ranking' ? 'Ranking in Progress' : 'Final Results'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this), step === 'ranking' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center gap-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"w-32 h-2 rounded-full bg-base-300 overflow-hidden\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"h-full bg-primary transition-all duration-300 rounded-full\",\n                style: {\n                  width: `${Math.min(100, Math.round(comparisons / maxComparisons * 100))}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 569,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm font-medium\",\n              children: [comparisons, \" / \", maxComparisons]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 575,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 534,\n    columnNumber: 3\n  }, this);\n}\n_s2(App, \"b3EKrXRuSO5/R0sjJLQ3JVIf34g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","useRef","InputForm","RankingProcess","MovieResults","ProgressBar","ModeSelection","jsxDEV","_jsxDEV","CONFIDENCE_SCALING","BASE_THRESHOLD","MIN_DATASET","MAX_DATASET","EARLY_STAGE_MULTIPLIER","LATE_STAGE_MULTIPLIER","MIN_ALLOWED_THRESHOLD","MAX_ALLOWED_THRESHOLD","calculateAdaptiveThresholds","movieCount","progress","sizeFactor","Math","min","max","baseThreshold","progressMultiplier","adaptiveThreshold","confidence","stability","transitivity","rankChange","App","_s2","_s","$RefreshSig$","movies","setMovies","rankings","setRankings","step","setStep","comparisons","setComparisons","maxComparisons","setMaxComparisons","pendingUpdates","setPendingUpdates","recentChanges","setRecentChanges","comparisonHistory","setComparisonHistory","movieMomentum","setMovieMomentum","CONVERGENCE_CHECK_WINDOW","BASE_LEARNING_RATE","VOLATILITY_WINDOW","VOLATILITY_THRESHOLD_HIGH","VOLATILITY_THRESHOLD_LOW","MOMENTUM_FACTOR","MIN_LEARNING_RATE","MAX_LEARNING_RATE","EARLY_TERMINATION","MIN_PROGRESS","MIN_COMPARISONS_PER_MOVIE","MIN_CONFIDENCE_THRESHOLD","STABILITY_WINDOW","STABILITY_THRESHOLD","MIN_TRANSITIVITY_SCORE","RELATIVE_RANK_STABILITY","calculateBatchParameters","scalingFactor","log2","mousePosition","setMousePosition","x","y","updateMousePosition","e","clientX","clientY","baseSizes","EARLY_STAGE_SIZE","floor","MID_STAGE_SIZE","LATE_STAGE_SIZE","EARLY_STAGE_THRESHOLD","LATE_STAGE_THRESHOLD","calculateVolatility","length","recentVolatility","slice","reduce","sum","change","abs","volatilityFactor","round","startRanking","movieList","console","log","initialRankings","acc","movie","identifier","rating","wins","losses","recentResults","confidenceScore","uncertainty","selectMode","mode","comparisonsCount","finishRanking","setTimeout","handleUndo","newHistory","lastComparison","pop","prev","calculateConfidence","movieId","warn","record","totalComparisons","winRatio","consistency","ratingDiff","sqrt","checkTransitivityViolation","winner","loser","winnerRating","loserRating","getDynamicLearningRate","winnerConfidence","loserConfidence","learningRate","surpriseFactor","exp","confidenceFactor","winnerMomentum","loserMomentum","avgMomentum","calculateOptimalBatchSize","batchParams","avgConfidence","Object","values","early","mid","late","toFixed","calculateTransitivityScore","transitiveTriads","totalTriads","sortedMovies","sort","a","b","map","r","sampleSize","i","idx1","random","idx2","idx3","c","calculateRankStability","currentRanking","previousRanking","stabilityScore","previousIndex","indexOf","maxPossibleDiff","actualDiff","checkRankingStability","adaptiveThresholds","insufficientComparisons","some","recentInstability","transitivityScore","rankStability","checkConvergence","processBatchUpdate","updates","prevRankings","newRankings","newMomentum","forEach","winnerStrength","loserStrength","expectedProbWinner","ratingChange","updateRankings","winnerIdentifier","loserIdentifier","newPending","optimalBatchSize","memoizedRankingProcess","onChoose","onFinish","onUndo","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onSubmit","currentStep","onModeSelect","style","width","_c","$RefreshReg$"],"sources":["/Users/kilianreichl/RBDev/rankboxd/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect, useCallback, useMemo, useRef } from 'react';\nimport InputForm from './components/InputForm';\nimport RankingProcess from './components/RankingProcess';\nimport MovieResults from './components/Results';\nimport ProgressBar from './components/ProgressBar';\nimport ModeSelection from './components/ModeSelection';\n\nconst CONFIDENCE_SCALING = {\n  BASE_THRESHOLD: 0.7,\n  MIN_DATASET: 10,\n  MAX_DATASET: 500,\n  EARLY_STAGE_MULTIPLIER: 0.8,\n  LATE_STAGE_MULTIPLIER: 1.2,\n  MIN_ALLOWED_THRESHOLD: 0.5,\n  MAX_ALLOWED_THRESHOLD: 0.9\n};\n\nconst calculateAdaptiveThresholds = (movieCount, progress) => {\n  // Calculate base scaling factor based on dataset size\n  const sizeFactor = Math.min(Math.max(\n    (movieCount - CONFIDENCE_SCALING.MIN_DATASET) / \n    (CONFIDENCE_SCALING.MAX_DATASET - CONFIDENCE_SCALING.MIN_DATASET),\n    0\n  ), 1);\n  \n  // Adjust base threshold based on dataset size\n  // Smaller datasets need higher confidence thresholds\n  const baseThreshold = CONFIDENCE_SCALING.BASE_THRESHOLD * (1 - sizeFactor * 0.3);\n  \n  // Calculate progress-based thresholds\n  const progressMultiplier = progress < 0.3 ? \n    CONFIDENCE_SCALING.EARLY_STAGE_MULTIPLIER :\n    progress > 0.7 ? \n      CONFIDENCE_SCALING.LATE_STAGE_MULTIPLIER : \n      1;\n  \n  // Calculate final threshold with bounds\n  const adaptiveThreshold = Math.min(\n    Math.max(\n      baseThreshold * progressMultiplier,\n      CONFIDENCE_SCALING.MIN_ALLOWED_THRESHOLD\n    ),\n    CONFIDENCE_SCALING.MAX_ALLOWED_THRESHOLD\n  );\n\n  return {\n    confidence: adaptiveThreshold,\n    stability: adaptiveThreshold * 0.8,\n    transitivity: adaptiveThreshold * 0.9,\n    rankChange: Math.max(0.02, 0.05 * (1 - sizeFactor))\n  };\n};\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [rankings, setRankings] = useState({});\n  const [step, setStep] = useState('input');\n  const [comparisons, setComparisons] = useState(0);\n  const [maxComparisons, setMaxComparisons] = useState(0);\n  const [pendingUpdates, setPendingUpdates] = useState([]);\n  const [recentChanges, setRecentChanges] = useState([]);\n  const [comparisonHistory, setComparisonHistory] = useState([]);\n  const [movieMomentum, setMovieMomentum] = useState({});\n\n  const CONVERGENCE_CHECK_WINDOW = 10;\n  const BASE_LEARNING_RATE = 0.1;\n\n  const VOLATILITY_WINDOW = 20; // How many recent changes to consider\n  const VOLATILITY_THRESHOLD_HIGH = 0.05; // High volatility threshold\n  const VOLATILITY_THRESHOLD_LOW = 0.01; // Low volatility threshold\n\n  const MOMENTUM_FACTOR = 0.9;\n  const MIN_LEARNING_RATE = 0.01;\n  const MAX_LEARNING_RATE = 0.2;\n\n  const EARLY_TERMINATION = {\n    MIN_PROGRESS: 0.4, // Don't terminate before 40% completion\n    MIN_COMPARISONS_PER_MOVIE: 5,\n    MIN_CONFIDENCE_THRESHOLD: 0.7,\n    STABILITY_WINDOW: 15,\n    STABILITY_THRESHOLD: 0.03,\n    MIN_TRANSITIVITY_SCORE: 0.85,\n    RELATIVE_RANK_STABILITY: 0.9\n  };\n\n  const calculateBatchParameters = useCallback((movieCount) => {\n  const scalingFactor = Math.log2(movieCount) / Math.log2(100);\n\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  const updateMousePosition = useCallback((e) => {\n    setMousePosition({\n      x: e.clientX,\n      y: e.clientY\n    });\n  }, []);  \n\n  // Calculate base sizes\n  const baseSizes = {\n    EARLY_STAGE_SIZE: Math.min(8, Math.max(2, Math.floor(movieCount * 0.03 * scalingFactor))),\n    MID_STAGE_SIZE: Math.min(12, Math.max(3, Math.floor(movieCount * 0.06 * scalingFactor))),\n    LATE_STAGE_SIZE: Math.min(20, Math.max(4, Math.floor(movieCount * 0.1 * scalingFactor))),\n    EARLY_STAGE_THRESHOLD: 0.15 + (0.05 * (1 - scalingFactor)),\n    LATE_STAGE_THRESHOLD: 0.65 + (0.1 * scalingFactor),\n    MIN_CONFIDENCE_THRESHOLD: 0.35 + (0.1 * scalingFactor)\n  };\n  \n  // Calculate volatility factor based on recent rating changes\n  const calculateVolatility = () => {\n    if (recentChanges.length < VOLATILITY_WINDOW) {\n      return 1; // Default to normal batch size if not enough data\n    }\n\n    // Calculate average magnitude of recent rating changes\n    const recentVolatility = recentChanges\n      .slice(-VOLATILITY_WINDOW)\n      .reduce((sum, change) => sum + Math.abs(change), 0) / VOLATILITY_WINDOW;\n\n    // Convert volatility to a scaling factor between 0.5 and 1.5\n    if (recentVolatility > VOLATILITY_THRESHOLD_HIGH) {\n      return 0.5; // High volatility = smaller batches\n    } else if (recentVolatility < VOLATILITY_THRESHOLD_LOW) {\n      return 1.5; // Low volatility = larger batches\n    } else {\n      // Linear interpolation between thresholds\n      return 1 + ((VOLATILITY_THRESHOLD_HIGH - recentVolatility) / \n                  (VOLATILITY_THRESHOLD_HIGH - VOLATILITY_THRESHOLD_LOW));\n    }\n  };\n\n  const volatilityFactor = calculateVolatility();\n  \n  // Apply volatility factor to batch sizes\n  return {\n    ...baseSizes,\n    EARLY_STAGE_SIZE: Math.max(2, Math.round(baseSizes.EARLY_STAGE_SIZE * volatilityFactor)),\n    MID_STAGE_SIZE: Math.max(3, Math.round(baseSizes.MID_STAGE_SIZE * volatilityFactor)),\n    LATE_STAGE_SIZE: Math.max(4, Math.round(baseSizes.LATE_STAGE_SIZE * volatilityFactor))\n  };\n}, [recentChanges]);\n\n  const startRanking = useCallback((movieList) => {\n    console.log(`Starting ranking process with ${movieList.length} movies`);\n    const initialRankings = movieList.reduce((acc, movie) => {\n      acc[movie.identifier] = {\n        rating: 0,\n        movie: movie,\n        wins: 0,\n        losses: 0,\n        comparisons: 0,\n        recentResults: [], // Track last N results\n        confidenceScore: 0,\n        uncertainty: 0\n      };\n      return acc;\n    }, {});\n    setMovies(movieList);\n    setRankings(initialRankings);\n    setStep('mode-selection');\n  }, []);\n\n  const selectMode = (mode, comparisonsCount) => {\n    setMaxComparisons(comparisonsCount);\n    setStep('ranking');\n  };\n\n  const finishRanking = useCallback(() => {\n    console.log(\"Finishing ranking process\");\n    setTimeout(() => {\n      setStep('results');\n    }, 0);\n  }, []);\n\n  const handleUndo = useCallback(() => {\n    if (comparisonHistory.length > 0) {\n      const newHistory = [...comparisonHistory];\n      const lastComparison = newHistory.pop();\n      setComparisonHistory(newHistory);\n      setComparisons(prev => Math.max(0, prev - 1));\n      \n      // Clear any pending updates\n      setPendingUpdates([]);\n      \n      // Reset the rankings to the previous state\n      if (lastComparison) {\n        setRankings(lastComparison.rankings);\n        // Reset recent changes since we're going back\n        setRecentChanges([]);\n      }\n    }\n  }, [comparisonHistory]);\n\n  const calculateConfidence = useMemo(() => \n    (movieId) => {\n      if (!rankings[movieId]) {\n        console.warn(`No ranking found for movie ID: ${movieId}`);\n        return 0;\n      }\n      const record = rankings[movieId];\n      if (!record.comparisons) {\n        return 0;\n      }\n      const totalComparisons = record.comparisons;\n      \n      const winRatio = record.wins / totalComparisons;\n      const consistency = 1 - (Math.abs(0.5 - winRatio) * 2);\n      \n      const ratingDiff = Math.abs(record.rating);\n      return Math.sqrt(totalComparisons) * (1 - consistency) * (1 / (1 + ratingDiff));\n    }, \n    [rankings]\n  );\n\n  const checkTransitivityViolation = useCallback((winner, loser) => {\n    const winnerRating = rankings[winner].rating;\n    const loserRating = rankings[loser].rating;\n    \n    // If the winner's current rating is lower, this is a transitivity violation\n    if (winnerRating < loserRating) {\n      console.log(`Transitivity violation detected: ${winner} (${winnerRating}) beat ${loser} (${loserRating})`);\n      return true;\n    }\n    return false;\n  }, [rankings]);\n\n  const getDynamicLearningRate = useCallback((winner, loser) => {\n    const progress = comparisons / maxComparisons;\n    const ratingDiff = Math.abs(rankings[winner].rating - rankings[loser].rating);\n    const winnerConfidence = calculateConfidence(winner);\n    const loserConfidence = calculateConfidence(loser);\n    \n    // Start with base learning rate\n    let learningRate = BASE_LEARNING_RATE;\n    \n    // Adjust based on progress\n    learningRate *= (1 - progress * 0.5);\n    \n    // Adjust for rating difference\n    const surpriseFactor = 1 / (1 + Math.exp(-5 * (1 - ratingDiff)));\n    learningRate *= (1 + surpriseFactor);\n    \n    // Confidence adjustment\n    const confidenceFactor = 1 - (winnerConfidence + loserConfidence) / 4;\n    learningRate *= confidenceFactor;\n    \n    // Transitivity violation adjustment\n    if (checkTransitivityViolation(winner, loser)) {\n      learningRate *= 1.5;\n    }\n    \n    // Apply momentum if available\n    const winnerMomentum = movieMomentum[winner] || 0;\n    const loserMomentum = movieMomentum[loser] || 0;\n    const avgMomentum = (Math.abs(winnerMomentum) + Math.abs(loserMomentum)) / 2;\n    learningRate *= (1 + avgMomentum * MOMENTUM_FACTOR);\n    \n    // Clamp learning rate\n    return Math.max(MIN_LEARNING_RATE, Math.min(MAX_LEARNING_RATE, learningRate));\n  }, [comparisons, maxComparisons, rankings, checkTransitivityViolation, calculateConfidence, movieMomentum]);\n  \n  const calculateOptimalBatchSize = useCallback(() => {\n    const movieCount = movies.length;\n    const batchParams = calculateBatchParameters(movieCount);\n    const progress = comparisons / maxComparisons;\n    \n    // Calculate average confidence across all movies\n    const avgConfidence = Object.values(rankings).reduce((sum, record) => {\n      return sum + (record && record.movie ? calculateConfidence(record.movie.identifier) : 0);\n    }, 0) / movieCount;\n  \n    console.log(`Current batch parameters for ${movieCount} movies:`, {\n      early: batchParams.EARLY_STAGE_SIZE,\n      mid: batchParams.MID_STAGE_SIZE,\n      late: batchParams.LATE_STAGE_SIZE,\n      progress: progress.toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2)\n    });\n  \n    // Determine stage based on progress\n    if (progress < batchParams.EARLY_STAGE_THRESHOLD) {\n      return batchParams.EARLY_STAGE_SIZE;\n    } else if (progress > batchParams.LATE_STAGE_THRESHOLD) {\n      return batchParams.LATE_STAGE_SIZE;\n    } else {\n      return avgConfidence < batchParams.MIN_CONFIDENCE_THRESHOLD \n        ? batchParams.EARLY_STAGE_SIZE \n        : batchParams.MID_STAGE_SIZE;\n    }\n  }, [movies.length, comparisons, maxComparisons, rankings, calculateConfidence, calculateBatchParameters]);\n\n  const calculateTransitivityScore = useCallback(() => {\n    let transitiveTriads = 0;\n    let totalTriads = 0;\n  \n    // Get sorted movies by rating\n    const sortedMovies = Object.values(rankings)\n      .sort((a, b) => b.rating - a.rating)\n      .map(r => r.movie.identifier);\n  \n    // Check random sample of triads for transitivity\n    const sampleSize = Math.min(1000, Math.floor(sortedMovies.length * (sortedMovies.length - 1) * (sortedMovies.length - 2) / 6));\n    \n    for (let i = 0; i < sampleSize; i++) {\n      const idx1 = Math.floor(Math.random() * sortedMovies.length);\n      const idx2 = Math.floor(Math.random() * sortedMovies.length);\n      const idx3 = Math.floor(Math.random() * sortedMovies.length);\n      \n      if (idx1 !== idx2 && idx2 !== idx3 && idx1 !== idx3) {\n        totalTriads++;\n        const [a, b, c] = [sortedMovies[idx1], sortedMovies[idx2], sortedMovies[idx3]].sort(\n          (x, y) => rankings[y].rating - rankings[x].rating\n        );\n        \n        if (rankings[a].rating > rankings[b].rating && \n            rankings[b].rating > rankings[c].rating && \n            rankings[a].rating > rankings[c].rating) {\n          transitiveTriads++;\n        }\n      }\n    }\n  \n    return totalTriads > 0 ? transitiveTriads / totalTriads : 0;\n  }, [rankings]);\n  \n  const calculateRankStability = useCallback(() => {\n    if (comparisonHistory.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return 0;\n    }\n  \n    const currentRanking = Object.values(rankings)\n      .sort((a, b) => b.rating - a.rating)\n      .map(r => r.movie.identifier);\n  \n    const previousRanking = Object.values(\n      comparisonHistory[comparisonHistory.length - EARLY_TERMINATION.STABILITY_WINDOW].rankings\n    )\n      .sort((a, b) => b.rating - a.rating)\n      .map(r => r.movie.identifier);\n  \n    let stabilityScore = 0;\n    for (let i = 0; i < currentRanking.length; i++) {\n      const previousIndex = previousRanking.indexOf(currentRanking[i]);\n      const maxPossibleDiff = currentRanking.length - 1;\n      const actualDiff = Math.abs(i - previousIndex);\n      stabilityScore += 1 - (actualDiff / maxPossibleDiff);\n    }\n  \n    return stabilityScore / currentRanking.length;\n  }, [rankings, comparisonHistory, EARLY_TERMINATION.STABILITY_WINDOW]);\n\n  const checkRankingStability = useCallback(() => {\n    const progress = comparisons / maxComparisons;\n    const adaptiveThresholds = calculateAdaptiveThresholds(movies.length, progress);\n    \n    // Don't check before minimum progress\n    if (comparisons / maxComparisons < EARLY_TERMINATION.MIN_PROGRESS) {\n      return false;\n    }\n  \n    // Check minimum comparisons per movie\n    const insufficientComparisons = Object.values(rankings).some(\n      record => record.comparisons < EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE\n    );\n    if (insufficientComparisons) {\n      return false;\n    }\n  \n    // Calculate average confidence with adaptive threshold\n    const avgConfidence = Object.values(rankings).reduce(\n      (sum, record) => sum + calculateConfidence(record.movie.identifier),\n      0\n    ) / movies.length;\n    if (avgConfidence < Math.max(adaptiveThresholds.confidence, EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD)) {\n      return false;\n    }\n  \n    // Check recent stability with adaptive threshold\n    if (recentChanges.length < EARLY_TERMINATION.STABILITY_WINDOW) {\n      return false;\n    }\n    const recentInstability = recentChanges\n      .slice(-EARLY_TERMINATION.STABILITY_WINDOW)\n      .some(change => Math.abs(change) > Math.min(adaptiveThresholds.rankChange, EARLY_TERMINATION.STABILITY_THRESHOLD));\n    if (recentInstability) {\n      return false;\n    }\n  \n    // Check transitivity with adaptive threshold\n    const transitivityScore = calculateTransitivityScore();\n    if (transitivityScore < Math.max(adaptiveThresholds.transitivity, EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE)) {\n      return false;\n    }\n  \n    // Check relative rank stability with adaptive threshold\n    const rankStability = calculateRankStability();\n    if (rankStability < Math.max(adaptiveThresholds.stability, EARLY_TERMINATION.RELATIVE_RANK_STABILITY)) {\n      return false;\n    }\n  \n    console.log('Early termination conditions met:', {\n      progress: (comparisons / maxComparisons).toFixed(2),\n      avgConfidence: avgConfidence.toFixed(2),\n      transitivityScore: transitivityScore.toFixed(2),\n      rankStability: rankStability.toFixed(2),\n      adaptiveThresholds: {\n        confidence: adaptiveThresholds.confidence.toFixed(2),\n        stability: adaptiveThresholds.stability.toFixed(2),\n        transitivity: adaptiveThresholds.transitivity.toFixed(2),\n        rankChange: adaptiveThresholds.rankChange.toFixed(3)\n      }\n    });\n  \n    return true;\n  }, [\n    movies.length,\n    comparisons,\n    maxComparisons,\n    rankings,\n    recentChanges,\n    calculateConfidence,\n    calculateTransitivityScore,\n    calculateRankStability,\n    EARLY_TERMINATION.MIN_PROGRESS,\n    EARLY_TERMINATION.MIN_COMPARISONS_PER_MOVIE,\n    EARLY_TERMINATION.MIN_CONFIDENCE_THRESHOLD,\n    EARLY_TERMINATION.STABILITY_WINDOW,\n    EARLY_TERMINATION.STABILITY_THRESHOLD,\n    EARLY_TERMINATION.MIN_TRANSITIVITY_SCORE,\n    EARLY_TERMINATION.RELATIVE_RANK_STABILITY\n  ]);\n\nconst checkConvergence = useCallback(() => {\n  if (checkRankingStability()) {\n    console.log(\"Rankings have converged with high confidence - finishing early\");\n    finishRanking();\n  }\n}, [checkRankingStability, finishRanking]);\n\nconst processBatchUpdate = useCallback((updates) => {\n  setRankings(prevRankings => {\n    const newRankings = { ...prevRankings };\n    const newMomentum = { ...movieMomentum };\n    \n    updates.forEach(({ winner, loser }) => {\n      const learningRate = getDynamicLearningRate(winner, loser);\n      \n      const winnerStrength = Math.exp(prevRankings[winner].rating);\n      const loserStrength = Math.exp(prevRankings[loser].rating);\n      \n      const expectedProbWinner = winnerStrength / (winnerStrength + loserStrength);\n      const ratingChange = learningRate * (1 - expectedProbWinner);\n      \n      // Update momentum\n      newMomentum[winner] = (newMomentum[winner] || 0) * MOMENTUM_FACTOR + ratingChange;\n      newMomentum[loser] = (newMomentum[loser] || 0) * MOMENTUM_FACTOR - ratingChange;\n      \n      // Update ratings with momentum influence\n      newRankings[winner] = {\n        ...newRankings[winner],\n        rating: prevRankings[winner].rating + ratingChange + newMomentum[winner] * MOMENTUM_FACTOR,\n        wins: prevRankings[winner].wins + 1,\n        comparisons: prevRankings[winner].comparisons + 1,\n        recentResults: [...prevRankings[winner].recentResults.slice(-9), 1]\n      };\n      \n      newRankings[loser] = {\n        ...newRankings[loser],\n        rating: prevRankings[loser].rating - ratingChange + newMomentum[loser] * MOMENTUM_FACTOR,\n        losses: prevRankings[loser].losses + 1,\n        comparisons: prevRankings[loser].comparisons + 1,\n        recentResults: [...prevRankings[loser].recentResults.slice(-9), 0]\n      };\n      \n      setRecentChanges(prev => [...prev.slice(-CONVERGENCE_CHECK_WINDOW + 1), ratingChange]);\n    });\n    \n    setMovieMomentum(newMomentum);\n    return newRankings;\n  });\n  \n  checkConvergence();\n}, [getDynamicLearningRate, checkConvergence, movieMomentum]);\n\n  const updateRankings = useCallback((winnerIdentifier, loserIdentifier) => {\n    // Save current state to history\n    setComparisonHistory(prev => [...prev, {\n      winner: winnerIdentifier,\n      loser: loserIdentifier,\n      rankings: { ...rankings }\n    }]);\n  \n    // Add to pending updates and process if optimal batch size reached\n    setPendingUpdates(prev => {\n      const newPending = [...prev, { winner: winnerIdentifier, loser: loserIdentifier }];\n      const optimalBatchSize = calculateOptimalBatchSize();\n      \n      if (newPending.length >= optimalBatchSize) {\n        console.log(`Processing batch of size ${optimalBatchSize}`);\n        processBatchUpdate(newPending);\n        return [];\n      }\n      return newPending;\n    });\n  \n    setComparisons(prev => prev + 1);\n  }, [rankings, processBatchUpdate, calculateOptimalBatchSize]);\n\n  useEffect(() => {\n    if (step === 'results' && pendingUpdates.length > 0) {\n      processBatchUpdate(pendingUpdates);\n      setPendingUpdates([]);\n    }\n  }, [step, pendingUpdates, processBatchUpdate]);\n\n  const memoizedRankingProcess = useMemo(() => (\n    <RankingProcess \n      movies={movies} \n      rankings={rankings}\n      comparisons={comparisons}\n      maxComparisons={maxComparisons}\n      calculateConfidence={calculateConfidence}\n      onChoose={updateRankings} \n      onFinish={finishRanking}\n      onUndo={handleUndo}\n    />\n  ), [movies, rankings, comparisons, maxComparisons, calculateConfidence, updateRankings, finishRanking, handleUndo]);\n\n  // Around line 563, update the return statement:\n// Around line 563, update the return statement to make backgrounds consistent\n// Around line 563, update the return statement with solid background and texture\n// Around line 563, clean return statement with solid background\nreturn (\n  <div className=\"min-h-screen bg-base-100 text-base-content font-sans\">\n    {step === 'input' ? (\n      <div className=\"min-h-screen flex flex-col items-center px-4\">\n        <h1 className=\"text-6xl font-crimson font-bold mt-12 mb-16 animate-fade-in\">\n          RankBoxd\n        </h1>\n        <InputForm onSubmit={startRanking} />\n      </div>\n    ) : (\n      <div className=\"flex flex-col min-h-screen\">\n        <ProgressBar currentStep={step} />\n        <main className=\"flex-grow\">\n          {step === 'mode-selection' && (\n            <ModeSelection \n              movies={movies} \n              onModeSelect={selectMode}\n            />\n          )}\n          {step === 'ranking' && memoizedRankingProcess}\n          {step === 'results' && (\n            <MovieResults\n              rankings={Object.values(rankings)}\n              calculateConfidence={calculateConfidence}\n            />\n          )}\n        </main>\n        \n        {(step === 'ranking' || step === 'results') && (\n          <div className=\"sticky bottom-0 w-full bg-base-200 border-t border-base-300 shadow-lg\">\n            <div className=\"container mx-auto px-4 py-3 flex justify-between items-center\">\n              <p className=\"text-sm text-base-content/70\">\n                {step === 'ranking' ? 'Ranking in Progress' : 'Final Results'}\n              </p>\n              {step === 'ranking' && (\n                <div className=\"flex items-center gap-3\">\n                  <div className=\"w-32 h-2 rounded-full bg-base-300 overflow-hidden\">\n                    <div \n                      className=\"h-full bg-primary transition-all duration-300 rounded-full\"\n                      style={{ width: `${Math.min(100, Math.round((comparisons / maxComparisons) * 100))}%` }}\n                    />\n                  </div>\n                  <p className=\"text-sm font-medium\">\n                    {comparisons} / {maxComparisons}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    )}\n  </div>\n);\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}